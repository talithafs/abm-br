<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>vert.x project: The RSS reader tutorial. Step 3.</title>
	<guid isPermaLink="true">https://vertx.io/blog/the-rss-reader-tutorial-step-3</guid>
	<link>https://vertx.io/blog/the-rss-reader-tutorial-step-3</link>
	<description>&lt;article&gt;&lt;h1 id=&quot;quick-recap&quot;&gt;Quick recap&lt;/h1&gt;
&lt;p&gt;Now that &lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-3-6-0-released/&quot;&gt;Vert.x 3.6.0 has been released&lt;/a&gt;, it’s the perfect time to conclude our &lt;a href=&quot;https://vertx.io/docs/vertx-cassandra-client/java/&quot;&gt;Vert.x Cassandra Client&lt;/a&gt; tutorial!&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://vertx.io/blog/the-rss-reader-tutorial-step-2/&quot;&gt;the previous step&lt;/a&gt; we have successfully implemented the second endpoint 
of the RSS reader app.&lt;/p&gt;
&lt;p&gt;The RSS reader example assumes implementing 3 endpoints. This article is dedicated to implementing the last &lt;code&gt;GET /articles/by_rss_link?link={rss_link}&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;p&gt;Before completing this step, make sure your are in the &lt;code&gt;step_3&lt;/code&gt; git branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git checkout step_3&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;implementing-the-3rd-endpoint&quot;&gt;Implementing the 3rd endpoint&lt;/h1&gt;
&lt;p&gt;The 3rd endpoint serves a list of articles, related to a specific RSS channel. In a request, we specify RSS channel by providing a link. On the application side, after receiving a request we execute the following query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; title, article_link, description, pubDate &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; articles_by_rss_link &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rss_link = RSS_LINK_FROM_REQUEST ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;For obtaining articles by RSS link we need to prepare a related statement first. Change &lt;code&gt;AppVerticle#prepareSelectArticlesByRssLink&lt;/code&gt; in this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future &lt;span class=&quot;hljs-title&quot;&gt;prepareSelectArticlesByRssLink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Util.prepareQueryAndSetReference(client,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;&quot;&lt;/span&gt;,
            selectArticlesByRssLink
    );
}&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;And now, we can implement the &lt;code&gt;AppVerticle#getArticles&lt;/code&gt; method. Basically, it will use the &lt;code&gt;selectArticlesByRssLink&lt;/code&gt; statement for finding articles by the given link. Here’s the implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getArticles&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{
    String link = ctx.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (link == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
        responseWithInvalidRequest(ctx);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -&amp;gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (handler.succeeded()) {
                List rows = handler.result();

                JsonObject responseJson = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject();
                JsonArray articles = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonArray();

                rows.forEach(eachRow -&amp;gt; articles.add(
                        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pub_date&quot;&lt;/span&gt;, eachRow.getTimestamp(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).getTime())
                ));

                responseJson.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;articles&quot;&lt;/span&gt;, articles);
                ctx.response().end(responseJson.toString());
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                log.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;failed to get articles for &quot;&lt;/span&gt; + link, handler.cause());
                ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to retrieve the info from C*&quot;&lt;/span&gt;);
            }
        });
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;During the series we have showed how the RSS reader app can be implemented with &lt;a href=&quot;https://github.com/vert-x3/vertx-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading this. I hope you enjoyed reading this series. See you soon on our &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;Gitter channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 1: IDE Setup and an Empty Plugin</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-5182433312839995136</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-1-ide-setup-and-empty-plugin.html</link>
	<description>I recently started to write my first Jenkins plugin and I thought I share the experience with you. For that reason I started a new series of tutorials.&lt;br /&gt;&lt;br /&gt;Today we are building a simple Jenkins plugin using Eclipse. The basic steps of this tutorial are extracted from the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugin+tutorial&quot; target=&quot;_blank&quot;&gt;Jenkins Plugin Tutorial&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_01_empty_plugin.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_01_empty_plugin.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/01_empty_plugin&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;Prerequisites&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;As you are interested in writing a plugin for &lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; I expect that you have a rough idea what Jenkins is used for and how to administer it.&lt;br /&gt;&lt;br /&gt;While our build environment allows to run a test instance of Jenkins with our plugin enabled I also liked to have a 'real' Jenkins instance available to test my plugins. Therefore I use &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot;&gt;docker&lt;/a&gt; to quickly get started with a woking Jenkins installation.&lt;br /&gt;&lt;br /&gt;Once &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/debian/&quot; target=&quot;_blank&quot;&gt;you have installed docker&lt;/a&gt; (&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-debian-9&quot; target=&quot;_blank&quot;&gt;extended tutorial for debian&lt;/a&gt;), you can download the latest Jenkins container by using&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;docker pull jenkins/jenkins:lts&lt;/pre&gt;&lt;br /&gt;Now run your container using&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts&lt;/pre&gt;&lt;br /&gt;After the startup process your server is reachable via &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;To manage containers use commands&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;docker container ls&lt;br /&gt;docker container stop &amp;lt;container name&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Maven configuration&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We will need &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;maven &lt;/a&gt;installed and ready for creating the project, building and testing it, so make sure you have set it up correctly.&lt;br /&gt;&lt;br /&gt;Maven needs some configuration ready to learn about jenkins plugins, therefore you need to adapt the configuration file slightly. On linux change &lt;i&gt;~/.m2/settings.xml&lt;/i&gt;, on windows modify/create &lt;i&gt;%USERPROFILE%\.m2\settings.xml&lt;/i&gt; and set following content:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;settings&amp;gt;&lt;br /&gt; &amp;lt;pluginGroups&amp;gt;&lt;br /&gt;  &amp;lt;pluginGroup&amp;gt;org.jenkins-ci.tools&amp;lt;/pluginGroup&amp;gt;&lt;br /&gt; &amp;lt;/pluginGroups&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;profiles&amp;gt;&lt;br /&gt;  &amp;lt;!-- Give access to Jenkins plugins --&amp;gt;&lt;br /&gt;  &amp;lt;profile&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;jenkins&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;activation&amp;gt;&lt;br /&gt;    &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;&lt;br /&gt;   &amp;lt;/activation&amp;gt;&lt;br /&gt;   &amp;lt;repositories&amp;gt;&lt;br /&gt;    &amp;lt;repository&amp;gt;&lt;br /&gt;     &amp;lt;id&amp;gt;repo.jenkins-ci.org&amp;lt;/id&amp;gt;&lt;br /&gt;     &amp;lt;url&amp;gt;https://repo.jenkins-ci.org/public/&amp;lt;/url&amp;gt;&lt;br /&gt;    &amp;lt;/repository&amp;gt;&lt;br /&gt;   &amp;lt;/repositories&amp;gt;&lt;br /&gt;   &amp;lt;pluginRepositories&amp;gt;&lt;br /&gt;    &amp;lt;pluginRepository&amp;gt;&lt;br /&gt;     &amp;lt;id&amp;gt;repo.jenkins-ci.org&amp;lt;/id&amp;gt;&lt;br /&gt;     &amp;lt;url&amp;gt;https://repo.jenkins-ci.org/public/&amp;lt;/url&amp;gt;&lt;br /&gt;    &amp;lt;/pluginRepository&amp;gt;&lt;br /&gt;   &amp;lt;/pluginRepositories&amp;gt;&lt;br /&gt;  &amp;lt;/profile&amp;gt;&lt;br /&gt; &amp;lt;/profiles&amp;gt;&lt;br /&gt; &amp;lt;mirrors&amp;gt;&lt;br /&gt;  &amp;lt;mirror&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;repo.jenkins-ci.org&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;url&amp;gt;https://repo.jenkins-ci.org/public/&amp;lt;/url&amp;gt;&lt;br /&gt;   &amp;lt;mirrorOf&amp;gt;m.g.o-public&amp;lt;/mirrorOf&amp;gt;&lt;br /&gt;  &amp;lt;/mirror&amp;gt;&lt;br /&gt; &amp;lt;/mirrors&amp;gt;&lt;br /&gt;&amp;lt;/settings&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Hint:&lt;/b&gt; On windows I had to remove the settings file &lt;i&gt;&amp;lt;maven install folder&amp;gt;\conf\settings.xml&lt;/i&gt; as it was used in favor of my profile settings.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Create the plugin skeleton&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To create the initial project open a shell and execute:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn archetype:generate -Dfilter=io.jenkins.archetypes:empty-plugin&lt;/pre&gt;You will be asked some questions how your plugin should be configurated: &lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;[INFO] Scanning for projects...&lt;br /&gt;[INFO]                                                                         &lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] Building Maven Stub Project (No POM) 1&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] &amp;gt;&amp;gt;&amp;gt; maven-archetype-plugin:3.0.1:generate (default-cli) &amp;gt; generate-sources @ standalone-pom &amp;gt;&amp;gt;&amp;gt;&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] &amp;lt;&amp;lt;&amp;lt; maven-archetype-plugin:3.0.1:generate (default-cli) &amp;lt; generate-sources @ standalone-pom &amp;lt;&amp;lt;&amp;lt;&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---&lt;br /&gt;[INFO] Generating project in Interactive mode&lt;br /&gt;[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)&lt;br /&gt;Choose archetype:&lt;br /&gt;1: remote -&amp;gt; io.jenkins.archetypes:empty-plugin (Skeleton of a Jenkins plugin with a POM and an empty source tree.)&lt;br /&gt;Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 1&lt;br /&gt;Choose io.jenkins.archetypes:empty-plugin version: &lt;br /&gt;1: 1.0&lt;br /&gt;2: 1.1&lt;br /&gt;3: 1.2&lt;br /&gt;4: 1.3&lt;br /&gt;5: 1.4&lt;br /&gt;Choose a number: 5: &lt;br /&gt;[INFO] Using property: groupId = unused&lt;br /&gt;Define value for property 'artifactId': builder.hello&lt;br /&gt;Define value for property 'version' 1.0-SNAPSHOT: : &lt;br /&gt;[INFO] Using property: package = unused&lt;br /&gt;Confirm properties configuration:&lt;br /&gt;groupId: unused&lt;br /&gt;artifactId: builder.hello&lt;br /&gt;version: 1.0-SNAPSHOT&lt;br /&gt;package: unused&lt;br /&gt; Y: : &lt;br /&gt;[INFO] ----------------------------------------------------------------------------&lt;br /&gt;[INFO] Using following parameters for creating project from Archetype: empty-plugin:1.4&lt;br /&gt;[INFO] ----------------------------------------------------------------------------&lt;br /&gt;[INFO] Parameter: groupId, Value: unused&lt;br /&gt;[INFO] Parameter: artifactId, Value: builder.hello&lt;br /&gt;[INFO] Parameter: version, Value: 1.0-SNAPSHOT&lt;br /&gt;[INFO] Parameter: package, Value: unused&lt;br /&gt;[INFO] Parameter: packageInPathFormat, Value: unused&lt;br /&gt;[INFO] Parameter: version, Value: 1.0-SNAPSHOT&lt;br /&gt;[INFO] Parameter: package, Value: unused&lt;br /&gt;[INFO] Parameter: groupId, Value: unused&lt;br /&gt;[INFO] Parameter: artifactId, Value: builder.hello&lt;br /&gt;[INFO] Project created from Archetype in dir: ~/Eclipse/codeandme.blogspot.com/ws/builder.hello&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] BUILD SUCCESS&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] Total time: 36.202 s&lt;br /&gt;[INFO] Finished at: 2018-11-27T20:34:15+01:00&lt;br /&gt;[INFO] Final Memory: 16M/169M&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;We just created the basic skeleton files and could start working right away. But as we want to do it the eclipse way we need to convert the project to a proper eclipse project. Therefore change into the created project directory and execute:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes eclipse:eclipse&lt;/pre&gt;&lt;br /&gt;The first run might take some time as maven has to fetch tons of dependencies. So sit back and enjoy the show...&lt;br /&gt;&lt;br /&gt;Once this step is done we can import our project using the Eclipse import wizard using &lt;i&gt;File / Import...&lt;/i&gt; and then select&lt;i&gt; General/Existing Projects into Workspace&lt;/i&gt;. On the following page select the project folder that was created by maven.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Update configuration files&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The created &lt;i&gt;pom.xml&lt;/i&gt; file for our plugin provides a good starting point for development. Typically you might want to update it a little before you actually start coding. Fields like &lt;i&gt;name&lt;/i&gt;, &lt;i&gt;description&lt;/i&gt;, &lt;i&gt;license &lt;/i&gt;should be pretty clear. More interesting is&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;    &amp;lt;properties&amp;gt;&lt;br /&gt;        &amp;lt;jenkins.version&amp;gt;2.7.3&amp;lt;/jenkins.version&amp;gt;&lt;br /&gt;        &amp;lt;java.level&amp;gt;7&amp;lt;/java.level&amp;gt;&lt;br /&gt;    &amp;lt;/properties&amp;gt;&lt;/pre&gt;Upgrading the java level to 8 should be pretty safe these days. Further Jenkins 2.7.3 is really outdated. To check out which versions are available you may browse the &lt;a href=&quot;https://repo.jenkins-ci.org/webapp/#/artifacts/browse/tree/General/releases/org/jenkins-ci/main/jenkins-war&quot; target=&quot;_blank&quot;&gt;jenkins artifactory server&lt;/a&gt;. Open the &lt;i&gt;jenkins-war&lt;/i&gt; node and search for a version you would like to use.&lt;br /&gt;&lt;br /&gt;I further adapt the &lt;i&gt;.project&lt;/i&gt; file and remove the &lt;i&gt;groovyNature&lt;/i&gt; as I am going to write some java code later.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Build &amp;amp; Deploy the Plugin&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To build your plugin simply run&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn package&lt;/pre&gt;This will build and test your package. Further it creates an installable *.hpi package in the &lt;i&gt;com.codeandme.jenkins.helloworld/target&lt;/i&gt; folder.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 5: Test the plugin in a test instance&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To see your plugin in action you might want to execute it in a test instance of Jenkins. Maven will help us to set this up:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn hpi:run -Djetty.port=8090&lt;/pre&gt;After the boot phase, open up your browser and point to &lt;a href=&quot;http://localhost:8090/jenkins&quot;&gt;http://localhost:8090/jenkins&lt;/a&gt; to access your test instance.&lt;br /&gt;&lt;br /&gt;Debugging is also quite simple, just add environment settings to setup your remote debugger. On Windows this would be:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000,suspend=n&lt;/pre&gt;On Linux use&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;export MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000,suspend=n&lt;/pre&gt;Then you should be able to setup a &lt;i&gt;Remote Java Application&lt;/i&gt; debug configuration in Eclipse.&lt;br /&gt;&lt;br /&gt;Writing a simple builder will be our next step, stay tuned for the next tutorial.</description>
	<pubDate>Wed, 05 Dec 2018 13:51:25 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Tom Schindl: Slides from JavaFX-Days Zürich on e(fx)clipse APIs</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5183</guid>
	<link>https://tomsondev.bestsolution.at/2018/12/05/slides-from-javafx-days-zurich-on-efxclipse-apis/</link>
	<description>&lt;p&gt;If you could not attend &lt;a href=&quot;https://www.javafx-days.com/&quot;&gt;my talk at the JavaFX-Days Zürich&lt;/a&gt; yesterday or you did and wanted to recap what you’ve presented. Here are the &lt;a href=&quot;https://tomsondev.bestsolution.at/2018/12/05/slides-from-javafx-days-zurich-on-efxclipse-apis/javafx-days/&quot; rel=&quot;attachment wp-att-5184&quot;&gt;slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I enjoyed the conference and I hope you did as well. See you next year!&lt;/p&gt;</description>
	<pubDate>Wed, 05 Dec 2018 08:57:45 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Using Eclipse Hono's Command&amp;Control with Eclipse Ditto</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-12-05-example-command-and-control.html</guid>
	<link>https://www.eclipse.org/ditto/2018-12-05-example-command-and-control.html</link>
	<description>&lt;p&gt;With &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_080.html&quot;&gt;version 0.8.0&lt;/a&gt; Eclipse Ditto can now interact with Eclipse Hono using the 
&lt;a href=&quot;https://www.eclipse.org/hono/concepts/command-and-control&quot;&gt;Command &amp;amp; Control&lt;/a&gt; feature. It is possible to send a 
Thing (or Feature) message at the Ditto Message API, which is then forwarded to Hono as a 
command message. Hono routes the message to the device, which in turn can send a response to the command including a 
status, telling if the command was successfully processed or not. 
This response is routed back via Hono to the Ditto Message API.&lt;/p&gt;

&lt;p&gt;In this example we connect the &lt;a href=&quot;https://ditto.eclipse.org/&quot;&gt;Ditto sandbox&lt;/a&gt; and the 
&lt;a href=&quot;https://www.eclipse.org/hono/sandbox/&quot;&gt;Hono sandbox&lt;/a&gt; to send a message (3) to a simulated device via the 
Ditto Messages API. The device receives the command from the Hono HTTP Adapter and responds with a message (4) 
that is routed back to the caller at the Ditto Message API (5). For the sake of simplicity we use simple curl 
commands both for the Ditto and Hono HTTP APIs.&lt;/p&gt;

&lt;p&gt;The following steps are covered in this example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup a connection between Eclipse Ditto and Hono sandboxes&lt;/li&gt;
  &lt;li&gt;Signal availability of the device&lt;/li&gt;
  &lt;li&gt;Send a Ditto message&lt;/li&gt;
  &lt;li&gt;Device receives command and sends command response&lt;/li&gt;
  &lt;li&gt;Caller receives response at Ditto Message API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&quot;Command and Control&quot; src=&quot;https://www.eclipse.org/ditto/images/blog/2018-12-14-command-and-control.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;prerequisites-a-ditto-digital-twin-and-a-hono-device&quot;&gt;Prerequisites: A Ditto digital twin and a Hono device&lt;/h3&gt;

&lt;p&gt;The creation of a Hono device and Ditto digital twin has already been covered in the blog post 
&lt;a href=&quot;https://www.eclipse.org/ditto/2018-05-02-connecting-ditto-hono.html&quot;&gt;Connecting Eclipse Ditto to Eclipse Hono&lt;/a&gt;. For brevity we will just list the 
required commands to create a twin/device here. For a detailed explanation of the steps please refer to the previous 
post.&lt;/p&gt;

&lt;h4 id=&quot;create-hono-device&quot;&gt;Create Hono device&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# setup a tenant&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;tenant-id&quot;: &quot;org.eclipse.ditto&quot;}'&lt;/span&gt; http://hono.eclipse.org:28080/tenant
&lt;span class=&quot;c&quot;&gt;# create a device&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;device-id&quot;: &quot;org.eclipse.ditto:teapot&quot;}'&lt;/span&gt; http://hono.eclipse.org:28080/registration/org.eclipse.ditto
&lt;span class=&quot;c&quot;&gt;# add device credentials&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ PWD_HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'teapot'&lt;/span&gt; | openssl dgst &lt;span class=&quot;nt&quot;&gt;-binary&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sha512&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 0&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;device-id&quot;: &quot;org.eclipse.ditto:teapot&quot;,
  &quot;type&quot;: &quot;hashed-password&quot;,
  &quot;auth-id&quot;: &quot;teapot&quot;,
  &quot;secrets&quot;: [{
      &quot;hash-function&quot; : &quot;sha-512&quot;,
      &quot;pwd-hash&quot;: &quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD_HASH&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;
  }]
}'&lt;/span&gt; http://hono.eclipse.org:28080/credentials/org.eclipse.ditto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-ditto-digital-twin&quot;&gt;Create Ditto digital twin&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create thing in Ditto&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo5:demo &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;features&quot;: {
      &quot;water&quot;: {
        &quot;properties&quot;: {
          &quot;temperature&quot;: 20
        }
      }
    }
}'&lt;/span&gt; https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:teapot 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-a-connection-for-command--control&quot;&gt;Setup a connection for Command &amp;amp; Control&lt;/h3&gt;
&lt;p&gt;In order to forward Ditto Messages to the device as a Hono command we first need to setup and configure a 
&lt;a href=&quot;https://www.eclipse.org/ditto/connectivity-manage-connections.html&quot;&gt;connection&lt;/a&gt; between Eclipse Ditto and Eclipse Hono that is prepared for 
&lt;em&gt;Command &amp;amp; Control&lt;/em&gt; messages. According to the 
&lt;a href=&quot;https://www.eclipse.org/hono/concepts/command-and-control&quot;&gt;Hono documentation&lt;/a&gt; 
the connection must contain a target with the address &lt;code class=&quot;highlighter-rouge&quot;&gt;control/&amp;lt;tenant-id&amp;gt;/&amp;lt;device-id&amp;gt;&lt;/code&gt; 
and a source with the address &lt;code class=&quot;highlighter-rouge&quot;&gt;control/&amp;lt;tenant-id&amp;gt;/&amp;lt;reply-identifier&amp;gt;&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;reply-identifier&lt;/code&gt; can be 
chosen arbitrarily, but must be set as the &lt;code class=&quot;highlighter-rouge&quot;&gt;reply-to&lt;/code&gt; header of a command exactly as defined in the connection:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:devopsPw1! &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
           &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
           &quot;headers&quot;: {
             &quot;aggregate&quot;: false
           },
           &quot;piggybackCommand&quot;: {
             &quot;type&quot;: &quot;connectivity.commands:createConnection&quot;,
             &quot;connection&quot;: {
               &quot;id&quot;: &quot;command-and-control-connection&quot;,
               &quot;connectionType&quot;: &quot;amqp-10&quot;,
               &quot;connectionStatus&quot;: &quot;open&quot;,
               &quot;uri&quot;: &quot;amqp://consumer%40HONO:verysecret@hono.eclipse.org:15672&quot;,
               &quot;failoverEnabled&quot;: true,
               &quot;sources&quot;: [{
                   &quot;addresses&quot;: [
                     &quot;control/org.eclipse.ditto/replies&quot;
                   ],
                   &quot;authorizationContext&quot;: [
                     &quot;nginx:demo5&quot;
                   ],
                   &quot;headerMapping&quot;: {
                     &quot;correlation-id&quot;: &quot;{{ header:correlation-id }}&quot;,
                     &quot;status&quot;: &quot;{{ header:status }}&quot;
                   }
                 }
               ],
               &quot;targets&quot;: [{
                   &quot;address&quot;: &quot;control/org.eclipse.ditto/{{ thing:id }}&quot;,
                   &quot;authorizationContext&quot;: [
                     &quot;nginx:demo5&quot;
                   ],
                   &quot;headerMapping&quot;: {
                     &quot;correlation-id&quot;: &quot;{{ header:correlation-id }}&quot;,
                     &quot;subject&quot;: &quot;{{ topic:subject }}&quot;,
                     &quot;reply-to&quot;: &quot;control/org.eclipse.ditto/replies&quot;
                   }
                 }
               ]
             }
           }
         }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://ditto.eclipse.org/devops/piggyback/connectivity?timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As described in the 
&lt;a href=&quot;https://www.eclipse.org/hono/api/command-and-control-api/#send-a-request-response-command&quot;&gt;Hono API description&lt;/a&gt; 
a command message has three mandatory properties: &lt;code class=&quot;highlighter-rouge&quot;&gt;correlation-id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subject&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reply-to&lt;/code&gt;, these are defined in the 
target header mapping of the connection. 
The source header mapping defines a mapping for &lt;code class=&quot;highlighter-rouge&quot;&gt;correlation-id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; to internal headers, they are required 
to properly map the Hono command response to a Ditto message response.&lt;/p&gt;

&lt;h3 id=&quot;signal-availability-of-device&quot;&gt;Signal availability of device&lt;/h3&gt;

&lt;p&gt;As we are using the Hono HTTP Adapter to connect our device, send telemetry and receive commands, the designated way 
is therefor to signal readiness to receive a command by specifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-ttd&lt;/code&gt; parameter on an arbitrary event (for 
detailed description please consult the 
[Hono HTTP Adapter] (https://www.eclipse.org/hono/user-guide/http-adapter/#specifying-the-time-a-device-will-wait-for-a-response) 
guide).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; teapot@org.eclipse.ditto:teapot &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hono-ttd: 60'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
           &quot;topic&quot;: &quot;org.eclipse.ditto/teapot/things/twin/commands/modify&quot;,
           &quot;path&quot;: &quot;/features/water/properties/temperature&quot;,
           &quot;value&quot;: 23
         }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     http://hono.eclipse.org:8080/telemetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The request is now open to receive a command for 60 seconds before it is terminated.&lt;/p&gt;

&lt;h3 id=&quot;send-a-ditto-message&quot;&gt;Send a Ditto message&lt;/h3&gt;

&lt;p&gt;Now we can use the &lt;a href=&quot;https://www.eclipse.org/ditto/protocol-specification-things-messages.html#using-the-messages-api&quot;&gt;Ditto Messages API&lt;/a&gt; to send a 
message to the device waiting for a command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:teapot/inbox/messages/brew?timeout=60'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo5:demo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x-correlation-id: command-and-control'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;targetTemperature&quot;:85}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;device-receives-the-command&quot;&gt;Device receives the command&lt;/h3&gt;

&lt;p&gt;The message is forwarded to Hono as configured in the connection and finally terminates the pending request we opened 
before with a status code of &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
hono-command: brew
hono-cmd-req-id: 013command-and-controlreplies
Content-Type: application/octet-stream
Content-Length: 17
Connection: Keep-Alive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hono adds two headers besides the standard HTTP headers: &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-command&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-cmd-req-id&lt;/code&gt;. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;hono-command&lt;/code&gt; contains the subject of the message and &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-cmd-req-id&lt;/code&gt; identifies the messages and is used to 
correlate the request and the response we are now going to send.&lt;/p&gt;

&lt;h3 id=&quot;device-sends-a-command-response&quot;&gt;Device sends a command response&lt;/h3&gt;

&lt;p&gt;We use the header value of &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-cmd-req-id&lt;/code&gt; to construct the response address: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://hono.eclipse.org:8080/control/res/013command-and-controlreplies&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another curl command completes the roundtrip with a response from the simulated device:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; teapot@org.eclipse.ditto:teapot &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hono-cmd-status: 200'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
           &quot;topic&quot;: &quot;org.eclipse.ditto/teapot/things/live/messages/brew&quot;,
           &quot;headers&quot;: {
             &quot;content-type&quot;: &quot;application/json&quot;,
             &quot;correlation-id&quot;: &quot;command-and-control&quot;
           },
           &quot;path&quot;: &quot;/inbox/messages/brew&quot;,
           &quot;value&quot;: { &quot;eta&quot;: 56},
           &quot;status&quot;: 200
         }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     http://hono.eclipse.org:8080/control/res/013command-and-controlreplies
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;message-response-is-received-at-ditto-message-api&quot;&gt;Message response is received at Ditto Message API&lt;/h3&gt;
&lt;p&gt;And finally we receive the command response at the Ditto Message API where we sent the original message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
correlation-id: command-and-control
message-id: command-and-control
status: 200
Content-Type: application/json
Content-Length: 10

{&quot;eta&quot;:56}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;alternative-receive-command-and-send-response-via-mqtt&quot;&gt;Alternative: Receive command and send response via MQTT&lt;/h3&gt;

&lt;p&gt;Alternatively we can also receive the command by subscribing to the MQTT topic &lt;code class=&quot;highlighter-rouge&quot;&gt;control/+/+/req/#&lt;/code&gt; at the 
&lt;a href=&quot;https://www.eclipse.org/hono/user-guide/mqtt-adapter/#command-control&quot;&gt;Hono MQTT Adapter&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mosquitto_sub &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; hono.eclipse.org &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8883 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'teapot@org.eclipse.ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; teapot &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'control/+/+/req/#'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And also publish the command response on the MQTT topic &lt;code class=&quot;highlighter-rouge&quot;&gt;control///res/013command-and-controlreplies/200&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosquitto_pub &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; hono.eclipse.org &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8883 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'teapot@org.eclipse.ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; teapot &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; control///res/013command-and-controlreplies/200 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
                    &quot;topic&quot;: &quot;org.eclipse.ditto/teapot/things/live/messages/brew&quot;,
                    &quot;headers&quot;: {
                      &quot;content-type&quot;: &quot;application/json&quot;,
                      &quot;correlation-id&quot;: &quot;command-and-control&quot;
                    },
                    &quot;path&quot;: &quot;/inbox/messages/brew&quot;,
                    &quot;value&quot;: {
                      &quot;eta&quot;: 58
                    },
                    &quot;status&quot;: 200
                  }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have any wishes, improvements, are missing something
or just want to get in touch with us, you can use one of
our &lt;a href=&quot;https://www.eclipse.org/ditto/feedback.html&quot;&gt;feedback channels&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 05 Dec 2018 05:00:00 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: Announcing e(fx)clipse DriftFX – Integrating Native Rendering Pipelines into JavaFX</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5143</guid>
	<link>https://tomsondev.bestsolution.at/2018/12/04/announcing-efxclipse-driftfx-integrating-native-rendering-pipelines-into-javafx/</link>
	<description>&lt;p&gt;I’ve had the honor to introduce &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; at todays &lt;a href=&quot;https://www.javafx-days.com/&quot;&gt;JavaFX-Days&lt;/a&gt; conference in Zürich.&lt;/p&gt;
&lt;h1&gt;What is DriftFX&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; is a JavaFX extension allowing you to embed native rendering engines (eg OpenGL) into the JavaFX-Scenegraph. &lt;/p&gt;
&lt;p&gt;To embed external rendering engines &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; exposes a new Node-Type &lt;strong&gt;DriftFXSurface&lt;/strong&gt; one can put at any place in the SceneGraph and treat it like any other JavaFX-Node – you can apply transformations, effects, … on it like you do with any other JavaFX-Node. In general you can think of it as ImageView on steroids.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;A more real world example what one can make happen with &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; can be seen in this video provide by &lt;a href=&quot;https://netallied.de/&quot;&gt;Netallied&lt;/a&gt; a partner company.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;What does DriftFX do?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; allows you to directly embed content rendered by native pipelines into JavaFX &lt;strong&gt;WITHOUT&lt;/strong&gt; going through the Main-Memory. The rendered artifacts stay at the GPU all time!&lt;/p&gt;
&lt;h1&gt;What DriftFX does not do?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; is not a rendering engine itself and it does not provide any abstraction layer to write native rendering engines. Its only purpose is to bring your rendered content directly in JavaFX.&lt;/p&gt;
&lt;h1&gt;What platforms does DriftFX support?&lt;/h1&gt;
&lt;p&gt;Our Beta implementation currently supports all 3 major Desktop-Systems supported by OpenJFX – Windows, OS-X and Linux. &lt;/p&gt;
&lt;p&gt;We currently targeted JavaFX-8 because this is what our customers are running their applications on. We plan to provide support for OpenJFX-11 and future releases of OpenJFX in the week/months to come.&lt;/p&gt;
&lt;h1&gt;Is DriftFX opensource?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;. We’ve been lucky that the sponsors of the work agreed to make &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; opensource. Currently there’s an open &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/pull/1&quot;&gt;Pull-Request at Github for the e(fx)clipse project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that it will take some time until the PR is merged. The reason is that we are going to run this through the Eclipse IP-Process to make sure you can safely embed it into your application.&lt;/p&gt;
&lt;h1&gt;Does DriftFX use internal “APIs”&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;. It integrates into the JavaFX-Rendering pipeline so it needs to access internals. We are aware that those can change at any time. We are open to contribute &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; in future to OpenJFX but it heavily depends on the OpenJFX community and the stewards of OpenJFX.&lt;/p&gt;
&lt;h1&gt;Is DriftFX production ready?&lt;/h1&gt;
&lt;p&gt;Propably not 100% yet, we are just about to integrate it into our customers application and fix problems as they arise. So we are somewhere in between Beta and production readiness. &lt;/p&gt;
&lt;p&gt;The reason to opensource it now is that we expect the OpenJFX community to take a look and help us improving it. We know that there are many very clever people in the OpenJFX community who can hopefully help us pushing &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; forward.&lt;/p&gt;
&lt;h1&gt;How can you/your company help?&lt;/h1&gt;
&lt;p&gt;First of all take a look at it and in case it looks interesting get in touch &lt;a href=&quot;https://www.bestsolution.at/&quot;&gt;with us&lt;/a&gt; to help fund the ongoing work on this matter.&lt;/p&gt;
&lt;h1&gt;Acknowledgement&lt;/h1&gt;
&lt;p&gt;First of all I’d like to thank &lt;a href=&quot;https://eclipsesource.com/about/company/eclipsesource-munich/&quot;&gt;EclipseSource Munich&lt;/a&gt; and &lt;a href=&quot;https://netallied.de/&quot;&gt;Netallied&lt;/a&gt; for their on going support on &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt;. Special thank goes out to my co-worker (and partner in crime) &lt;a href=&quot;https://github.com/redrezo&quot;&gt;Christoph&lt;/a&gt; and all other people at &lt;a href=&quot;https://www.bestsolution.at/&quot;&gt;BestSolution.at&lt;/a&gt; who made &lt;a href=&quot;https://github.com/eclipse-efx/efxclipse-drift/&quot;&gt;DriftFX&lt;/a&gt; happen!&lt;/p&gt;</description>
	<pubDate>Tue, 04 Dec 2018 19:17:10 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Building web-based modeling tools – EclipseSource OS Week 2018</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39933</guid>
	<link>https://eclipsesource.com/blogs/2018/12/04/building-web-based-modeling-tools-eclipsesource-os-week-2018/</link>
	<description>&lt;p&gt;At EclipseSource, we continuously drive innovation in a variety of open source projects to built tools upon. Our goal is to...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/04/building-web-based-modeling-tools-eclipsesource-os-week-2018/&quot; rel=&quot;nofollow&quot;&gt;Building web-based modeling tools – EclipseSource OS Week 2018&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 04 Dec 2018 15:44:09 +0000</pubDate>
</item>
<item>
	<title>itemis: Xtext 2.16 released!</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-2.16-released</guid>
	<link>https://blogs.itemis.com/en/xtext-2.16-released</link>
	<description>&lt;p&gt;The Xtext Team happily announces the availability of release 2.16.0. This release is part of the Eclipse 2018-12 simultaneous release, which is the 2nd release with the new quarterly release cadence. Besides stability and performance again, compatibility with the new Eclipse release was on the top index of work items.&lt;/p&gt; 
&lt;h2&gt;Accelerated Release Cycle&lt;/h2&gt; 
&lt;p&gt;The new release cadence is keeping the Xtext Team busy. Since we decided not only to participate in Eclipse’s quarterly simultaneous release (SimRel), but also deliver in the same rate new Xtext releases, we have to improve our internal processes. This means to constantly improve the release procedure and working on automation of recurring tasks for the release process itself, but also for maintenance tasks.&lt;/p&gt; 
&lt;p&gt;While with release 2.15 we entered the SimRel quite late near to its release, we managed to enter the release train already with M1 this time, and delivered also for M3. This helps our adopters within the SimRel to integrate with the upcoming release early and provide valuable integration feedback before the release.&lt;/p&gt; 
&lt;h2&gt;Preparing for Java 11&lt;/h2&gt; 
&lt;p&gt;Java 11 is out now and we planned to fully support this LTS release version with 2.16 already. Xtext depends on many components that have themselves be ready and available to run with Java 11: JDT, Gradle, Tycho, Maven, ASM, … It turned out that we could not wait or integrate all of them for 2.16 already, so it was decided to re-target full support to 2.17.&lt;/p&gt; 
&lt;p&gt;With Xtext 2.16, most preparation steps have been done already and many components have been upgraded: Xtext integrates with latest JDT, Gradle 4.10, Tycho 1.3, ASM 7. The remaining tasks are tracked in &lt;a href=&quot;https://github.com/eclipse/xtext/issues/1182&quot;&gt;issue #1182&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Xtext 2.16 is already ready to perform on a Java 11 VM unless the source level for used libraries and the required execution environment are targeting a lower language level.&lt;/p&gt; 
&lt;h2&gt;R.I.P. Ancient Eclipse Versions!&lt;/h2&gt; 
&lt;p&gt;Already Xtext 2.15 was declared to require Eclipse Oxygen 3.a as minimal platform version. With 2.16 Xtext now defined lower bound version constraints for all bundle dependencies from Eclipse Platform to their Oxygen.3a version.&lt;/p&gt; 
&lt;p&gt;As a consequence, Xtext 2.16 can’t be installed on a lower platform version anymore! We decided to cut off the older platform versions to leverage also newer APIs from the platform. And, to be honest, the team has not the capacity to support integration problems arising from a mixture of brand-new Xtext release with Eclipse versions from the stone age.&lt;/p&gt; 
&lt;h2&gt;Quickfix Testing API&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;org.eclipse.xtext.ui.testing&lt;/code&gt; bundle was extended by a new base class for testing quick fixes, &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractQuickfixTest.xtend&quot;&gt;AbstractQuickfixTest&lt;/a&gt;. This class provided a convenient way to test the availability of specific quick fixes in code sequences and their effect on the code when applied. This is done by using the provided method.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;public void testQuickfixesOn(CharSequence model, String issueCode, Quickfix... quickfixes)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The usage of this API is best demonstrated by the following example from Xtext’s Domainmodel example language:&lt;/p&gt; 
&lt;img alt=&quot;Xtext quickfix testing API screenshot&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/xtext-quickfix-testing-api.png?width=725&amp;amp;name=xtext-quickfix-testing-api.png&quot; style=&quot;width: 725px;&quot; width=&quot;725&quot; /&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;As you can see, the approach is to provide some DSL snippet which contains issues (like lower case entity name in &lt;code&gt;fix_invalid_entity_name()&lt;/code&gt;). For this snippet the &lt;code&gt;testQuickfixesOn()&lt;/code&gt; method is invoked for the &lt;code&gt;INVALID_TYPE_NAME&lt;/code&gt; issue code and expects the quick fixes’ name, description and the capitalized name after appliance.&lt;/p&gt; 
&lt;p&gt;Take the example’s Quickfix tests as a blue print and you should be able to easily test your implemented quick fixes now. Besides the Domainmodel example we have extended also the Statemachine and Home Automation example projects.&lt;/p&gt; 
&lt;h2&gt;Latest Language Server Protocol Support&lt;/h2&gt; 
&lt;p&gt;Xtext 2.16 is built against LSP4J 0.6, which reflects the latest state of the Language Server Protocol. With this release, Xtext now supports hierarchical document symbols. This has been added with &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specification#version_3_10_0&quot;&gt;LSP 3.10&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Xtext language servers can now use different strategies for the &lt;code&gt;exit&lt;/code&gt; command. The default behavior to handle this command was to terminate the VM by calling &lt;code&gt;System.exit()&lt;/code&gt;. While this is the desired behavior when running the language server in a separate process than the client, it is harmful when language client and server are sharing the same VM. Therefore a new interface &lt;code&gt;ILanguageServerShutdownAndExitHandler&lt;/code&gt; has been introduced, whose default implementation preserves the previous behavior. The &lt;code&gt;ILanguageServerShutdownAndExitHandler.NullImpl&lt;/code&gt; can be bound for languages which are used in embedded scenarios, where the VM has to be kept alive.&lt;/p&gt; 
&lt;h2&gt;Parallel XtextBuilder&lt;/h2&gt; 
&lt;p&gt;Xtext’s incremental project builder &lt;strong&gt;XtextBuilder&lt;/strong&gt; used the workspace root as scheduling rule so far, like most commonly used builders in the Eclipse platform did also. This meant that while building Xtext projects the builder held an exclusive lock on the workspace.&lt;/p&gt; 
&lt;p&gt;Starting with Eclipse 4.8 Photon, the project build has been enabled to support builders with a more “relaxed” scheduling strategy. This potentially allows projects in the workspace to be built in parallel, when they do not depend on each other and all configured builders are computing a more fine grained locking strategy.&lt;/p&gt; 
&lt;p&gt;The &lt;strong&gt;XtextBuilder&lt;/strong&gt; has been extended to support a variety of different scheduling strategies. This is an experimental feature for now, which needs activation by a preference that is not exposed to the UI.&lt;br /&gt;By setting &lt;code&gt;org.eclipse.xtext.builder/schedulingrule&lt;/code&gt; preference the XtextBuilder can be configured to use one of these locking strategies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;WORKSPACE&lt;/strong&gt;: Workspace root scheduling. This is the default value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ALL_XTEXT_PROJECTS&lt;/strong&gt;: Lock all projects with Xtext nature configured. Allows projects of other natures to be built in parallel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PROJECT&lt;/strong&gt;: Locks the currently built project.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NULL&lt;/strong&gt;: No locking.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Growing The Team&lt;/h2&gt; 
&lt;p&gt;We are happy that more people are helping the team with active contributions. Those who show their dedication to the project and deliver numerous valuable patches and features deserve their inclusion to the development team.&lt;/p&gt; 
&lt;p&gt;As a result, the Xtext team is welcoming two new committers who have earned their nomination: &lt;a href=&quot;https://hosting.itemis.de/author/tamas-miklossy&quot;&gt;Tamas Miklossy&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/kittaakos/&quot;&gt;Akos Kitta&lt;/a&gt;. Tamas’ dedication is mainly in the area of contributions to the Xtend language, Testing APIs, Example projects and maintenance work. Akos mainly works on the LSP integration. A warm welcome to them! With their help the project can keep up its high development speed.&lt;/p&gt; 
&lt;p&gt;Are you the next Xtext super hero?&lt;/p&gt; 
&lt;h2&gt;After The Release Is Before The Release&lt;/h2&gt; 
&lt;p&gt;With the Xtext 2.16 release available, we immediately start with working on 2.17. As mentioned above, full Java 11 support is on top of our list.&lt;/p&gt; 
&lt;p&gt;Further you can expect that we’ll provide Maven BOMs soon, which eases the configuration of compatible dependencies. This has been addressed as a consequence of some trouble users have with &lt;a href=&quot;https://github.com/eclipse/xtext/issues/1231&quot;&gt;incompatible dependencies&lt;/a&gt; in their Maven and Gradle builds.&lt;/p&gt; 
&lt;p&gt;As we are continuing to participate in Eclipse’s simultaneous release, 2.17 release dates are already known:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2.17.0.M1: Jan 14th 2019&lt;/li&gt; 
 &lt;li&gt;2.17.0.M2: Feb 4th 2019&lt;/li&gt; 
 &lt;li&gt;2.17.0.M3: Feb 25th 2019&lt;/li&gt; 
 &lt;li&gt;2.17.0 Final Release: Mar 3th 2019&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Save the date!&lt;/p&gt; 
&lt;h2&gt;Final Notes&lt;/h2&gt; 
&lt;p&gt;Xtext 2.16 is available now on the &lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/releases/2.16.0&quot;&gt;release update site&lt;/a&gt;, through the &lt;a href=&quot;https://marketplace.eclipse.org/content/eclipse-xtext&quot;&gt;Eclipse Marketplace&lt;/a&gt; and on &lt;a href=&quot;https://search.maven.org/search?q=g:org.eclipse.xtext%20v:2.16.0&quot;&gt;Maven Central&lt;/a&gt;. Besides the features highlighted by this article, more information on the release can be gathered from the &lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/12/04/version-2-16-0&quot;&gt;Xtext&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/xtend/releasenotes.html#/releasenotes/2018/12/04/version-2-16-0&quot;&gt;Xtend&lt;/a&gt; release notes.&lt;/p&gt; 
&lt;p&gt;Having &lt;a href=&quot;https://www.eclipse.org/forums/index.php?t=thread&amp;amp;frm_id=27&quot;&gt;questions or feedback&lt;/a&gt; on Eclipse Xtext? The Xtext team is eager to hear you! We are working hard to improve Xtext continuously and deliver it to you now even faster. Do you have something that you are missing? We are happily guiding you to add your own contribution, or &lt;a href=&quot;https://info.itemis.com/professional-xtext-support?hsCtaTracking=6f3a83c3-6d86-4cab-b702-f9702d201e70%7Cbf7d9e87-6a21-445f-a00a-4751823a0437&quot;&gt;get in contact with us&lt;/a&gt; to get support for adding features you need.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-2.16-released&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 04 Dec 2018 15:35:42 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 6: Advanced Configuration Area</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-1487486333378819909</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-6-advanced-configuration-area.html</link>
	<description>Our build is advancing. Today we want to move optional fields into an advanced section and provide reasonable defaults for these entries.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_06_advanced_configuration.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_06_advanced_configuration.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/06_advanced_configuration&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Advanced UI Section&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To simplify the job setup we now move all parameters except the build message to an advanced section.&lt;br /&gt;The only thing necessary in the &lt;i&gt;config.jelly&lt;/i&gt; file is to create the section and move all affected input elements into it:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Custom build message&quot; field=&quot;buildMessage&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:textbox default=&quot;${descriptor.getDefaultBuildMessage()}&quot; /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;f:advanced&amp;gt;&lt;br /&gt;  &amp;lt;f:entry title=&quot;Fail this build&quot; field=&quot;failBuild&quot;&amp;gt;&lt;br /&gt;   &amp;lt;f:checkbox /&amp;gt;&lt;br /&gt;  &amp;lt;/f:entry&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;f:entry title=&quot;Build Delay&quot; field=&quot;buildDelay&quot;&amp;gt;&lt;br /&gt;   &amp;lt;f:select /&amp;gt;&lt;br /&gt;  &amp;lt;/f:entry&amp;gt;&lt;br /&gt; &amp;lt;/f:advanced&amp;gt;&lt;/pre&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;Afterwards the UI looks like this:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-Xr9vMX4BzVg/XAWF9Ebo87I/AAAAAAAABFA/Pstn5lXiEY4b29yV7m9HQVTe-ekAImeAACLcBGAs/s1600/jenkins.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-Xr9vMX4BzVg/XAWF9Ebo87I/AAAAAAAABFA/Pstn5lXiEY4b29yV7m9HQVTe-ekAImeAACLcBGAs/s1600/jenkins.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt; &lt;b&gt;&lt;u&gt;Step 2: Java Refactoring&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Basically we do not need to change anything in the Java code to make this work. However we want to prepare a little for pipeline builds, so we remove non-required parameters from the constructor and create separate setters for them. To make Jenkins aware of these setters, use the &lt;i&gt;@DataBoundSetter&lt;/i&gt; annotation:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private boolean fFailBuild = false;&lt;br /&gt;&lt;br /&gt; private String fBuildMessage;&lt;br /&gt;&lt;br /&gt; private String fBuildDelay = &quot;none&quot;;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(String buildMessage) {&lt;br /&gt;  fBuildMessage = buildMessage;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @DataBoundSetter&lt;br /&gt; public void setFailBuild(boolean failBuild) {&lt;br /&gt;  fFailBuild = failBuild;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @DataBoundSetter&lt;br /&gt; public void setBuildDelay(String buildDelay) {&lt;br /&gt;  fBuildDelay = buildDelay;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Whenever a parameter is not required, remove it from the constructor and use a setter for it.&lt;/div&gt;</description>
	<pubDate>Mon, 03 Dec 2018 19:44:02 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>itemis: Combining EMF Models with Xtext DSLs</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/combining-emf-models-with-xtext-dsls</guid>
	<link>https://blogs.itemis.com/en/combining-emf-models-with-xtext-dsls</link>
	<description>&lt;p&gt;This blog post demonstrates use cases on combining EMF models with Xtext DSLs. It is based on &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.xtext.ui.examples/projects/fowlerdsl/org.eclipse.xtext.example.fowlerdsl/src/org/eclipse/xtext/example/fowlerdsl/Statemachine.xtext&quot; title=&quot;Example project on GitHub&quot;&gt;Martin Fowler's secret compartment state machine implementation&lt;/a&gt; available via the Xtext Example Wizard.&lt;/p&gt;  
&lt;p&gt;The meta-model of the statemachine language describes that a state machine consists of certain commands, events, states and transitions.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;Combining EMF models with xtext DSLs – Statemachine class diagram&quot; src=&quot;https://blogs.itemis.com/hubfs/1-Statemachine_class_diagram.jpg&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;All these elements can be defined either &lt;strong&gt;in one dsl file&lt;/strong&gt;, or can be split up into &lt;strong&gt;several *.statemachine files&lt;/strong&gt;.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;Xtext DSL&quot; src=&quot;https://blogs.itemis.com/hubfs/2-Xtext-DSL.png&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;However, if we describe the commands and events in EMF models on the one hand and the states and transitions in an Xtext DSL on the other hand, the &lt;strong&gt;validation reports problems&lt;/strong&gt; on the &lt;code&gt;fowler.statemachine&lt;/code&gt; file showing that the &lt;strong&gt;referenced commands and events cannot be resolved&lt;/strong&gt;.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;Xtext EMF not ok&quot; src=&quot;https://blogs.itemis.com/hubfs/3-Xtext-EMF-NOK.png&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;We would like to be able to &lt;strong&gt;reference EMF models from the Xtext DSL&lt;/strong&gt;. Before starting adapting the productive code base, we capture our requirement in a &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.tests/src/org/eclipse/xtext/example/fowlerdsl/tests/StatemachineParsingTest.xtend&quot; title=&quot;Statemachine parsing test on GitHub&quot;&gt;StatemachineParsingTest&lt;/a&gt;&lt;/em&gt; test case.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;Statemachine parsing test not ok&quot; src=&quot;https://blogs.itemis.com/hubfs/4-StatemachineParsingTest-NOK.png&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;Since we have a failing test now, we are allowed to extend the implementation. In order to be able to reference EMF models from an Xtext DSL, &lt;strong&gt;a new Xtext language has to be defined&lt;/strong&gt; for the EMF resources. Thus, we define the &lt;code&gt;org.eclipse.xtext.example.fowlerdsl.emfstatemachine&lt;/code&gt; Xtext language for the &lt;code&gt;*.emfstatemachine&lt;/code&gt; resources using the following steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;For the new language, we define the runtime dependency injection container by adding the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl/src/org/eclipse/xtext/example/fowlerdsl/EmfStatemachineRuntimeModule.xtend&quot; title=&quot;EMF Statemachine Runtime Module on GitHub&quot;&gt;EmfStatmachineRuntimeModule&lt;/a&gt;&lt;/em&gt; class extending the AbstractGenericResourceRuntimeModule class. The AbstractGenericResourceRuntimeModule contains the default bindings for EMF resources, the &lt;em&gt;EmfStatemachineRuntimeModule&lt;/em&gt; defines the language specific configurations such as the language name and the file extension.&lt;br /&gt; &lt;/li&gt; 
 &lt;li&gt;For the Eclipse-based UI services, we define the UI dependency injection container by adding the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/EmfStatemachineUiModule.xtend&quot; title=&quot;EMF Statemachine UI Module on GitHub&quot;&gt;EmfStatemachineUiModule&lt;/a&gt;&lt;/em&gt; class extending the &lt;em&gt;EmfUiModule&lt;/em&gt; class.&lt;br /&gt; &lt;/li&gt; 
 &lt;li&gt;We implement the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/internal/FowlerdslActivatorEx.xtend&quot; title=&quot;Fowler DSL Activator Ex on GitHub&quot;&gt;FowlerDslActivatorEx&lt;/a&gt;&lt;/em&gt; class inheriting from the generated &lt;em&gt;FowlerDslActivator&lt;/em&gt; class and register it in the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/META-INF/MANIFEST.MF#L29&quot; title=&quot;Manifest on GitHub&quot;&gt;MANIFEST.MF&lt;/a&gt;&lt;/em&gt; file to ensure that the &lt;em&gt;EmfStatemachineRuntimeModule&lt;/em&gt; and &lt;em&gt;EmfStatemachineUiModule&lt;/em&gt; classes are used while creating the injector of the newly defined Xtext language.&lt;br /&gt; &lt;/li&gt; 
 &lt;li&gt;In order to register the Xtext UI language services to the Xtext's registry, we implement the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/EmfStatemachineExecutableExtensionFactory.xtend&quot; title=&quot;EMF Statemachine Executable Extension Factory on GitHub&quot;&gt;EmfStatemachineExecutableExtensionFactory&lt;/a&gt;&lt;/em&gt; that extends the &lt;em&gt;AbstractGuiceAwareExecutableExtensionFactory.&lt;/em&gt; Last one delivers the bundle and the injector of the newly created Xtext language via the &lt;em&gt;FowlerDslActivatorEx&lt;/em&gt; class. Additionally, we register the language in the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/plugin.xml#L426-L433&quot; title=&quot;Plugin.xml on GitHub&quot;&gt;plugin.xml&lt;/a&gt;&lt;/em&gt; via the &lt;code&gt;org.eclipse.xtext.extension_resourceServiceProvider&lt;/code&gt; extension point with the uriExtension &lt;code&gt;emfstatemachine&lt;/code&gt; and an instance of the &lt;em&gt;EmfResourceUIServiceProvider&lt;/em&gt; created via the &lt;em&gt;EmfStatemachineExecutableExtensionFactory&lt;/em&gt; class.&lt;br /&gt; &lt;/li&gt; 
 &lt;li&gt;Optionally, we can register the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/editor/EmfStatemachineReflectiveTreeEditorOpener.xtend&quot;&gt;EmfStatemachineReflectiveTreeEditorOpener&lt;/a&gt;&lt;/em&gt; in the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/EmfStatemachineUiModule.xtend#L19-L25&quot;&gt;EmfStatemachineUiModule&lt;/a&gt;&lt;/em&gt; to open the EMF Reflective Tree Editor when the user follows a reference from the Xtext editor to an EMF element. To be able to use the EMF Reflective Tree Editor, we have to add the &lt;code&gt;org.eclipse.emf.ecore.editor&lt;/code&gt; plugin to the &lt;code&gt;Require-Bundle&lt;/code&gt; section in the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/META-INF/MANIFEST.MF#L23&quot;&gt;MANIFEST.MF&lt;/a&gt; file.&lt;br /&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;After implementing these steps, the successful execution of StatemachineParsingTest test case confirms that the &lt;strong&gt;EMF model references from the Xtext DSL can be resolved&lt;/strong&gt;.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;Statemachine parsing test is ok&quot; src=&quot;https://blogs.itemis.com/hubfs/5-StatemachineParsingTest-OK.png&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;When starting the Eclipse Runtime again, the previously reported validation errors are also gone. Note that not only the validation, but also the content assistant and the quickfix provider are aware of the existing EMF model elements.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;Xtext EMF ist Ok&quot; src=&quot;https://blogs.itemis.com/hubfs/6-Xtext-EMF-OK.png&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;To &lt;strong&gt;protect the implemented EMF-Xtext integration against regressions&lt;/strong&gt;, it is strongly recommended to extend the test base by &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.tests/src/org/eclipse/xtext/example/fowlerdsl/tests/StatemachineIndexTest.xtend&quot;&gt;Indexing&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.tests/src/org/eclipse/xtext/example/fowlerdsl/tests/StatemachineLinkingTest.xtend&quot;&gt;Linking&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.tests/src/org/eclipse/xtext/example/fowlerdsl/tests/StatemachineScopeProviderTest.xtend&quot;&gt;Scoping&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui.tests/src/org/eclipse/xtext/example/fowlerdsl/ui/tests/StatemachineContentAssist2Test.xtend&quot;&gt;ContentAssist&lt;/a&gt; and &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui.tests/src/org/eclipse/xtext/example/fowlerdsl/ui/tests/StatemachineQuickfix2Test.xtend&quot;&gt;Quickfix&lt;/a&gt; test cases.&lt;/p&gt; 
&lt;p&gt;An additional feature could be to add Xtext serialization support to EMF models; when the user edits an EMF element and saves the *.emfstatemachine file, we want that the corresponding *.statemachine Xtext DSL file is automatically generated.&lt;/p&gt; 
&lt;p&gt;To achieve that, we implement the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl/src/org/eclipse/xtext/example/fowlerdsl/generator/EmfStatemachineSerializer.xtend&quot;&gt;EmfStatemachineSerializer&lt;/a&gt;&lt;/em&gt; class and bind it in the &lt;em&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl/src/org/eclipse/xtext/example/fowlerdsl/EmfStatemachineRuntimeModule.xtend#L20-L22&quot;&gt;EmfStatemachineRuntimeModule&lt;/a&gt;&lt;/em&gt; class. Furthermore, the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/handlers/EmfStatemachineSerializationHandler.xtend&quot;&gt;EmfStatemachineSerializationHandler&lt;/a&gt; class registered in the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/combining-emf-models-with-xtext-dsls/org.eclipse.xtext.example.fowlerdsl.ui/plugin.xml#L452-L522&quot;&gt;plugin.xml&lt;/a&gt; triggers the manual conversion from EMF to Xtext via the &lt;code&gt;Serialize EMF State-Machine with Xtext&lt;/code&gt; context menu of the Package/Project Explorer.&lt;/p&gt; 
&lt;p&gt;If you would like to learn more about the Xtext-EMF integration, I recommend looking into &lt;a href=&quot;https://blogs.itemis.com/author/karsten-thoms&quot;&gt;Karsten&lt;/a&gt; and &lt;a href=&quot;https://blogs.itemis.com/author/holger-schill&quot;&gt;Holger&lt;/a&gt;'s presentation on &lt;a href=&quot;https://www.youtube.com/watch?v=teOULtQ81-U&quot;&gt;How to build Code Generators for Non-Xtext Models with Xtend&lt;/a&gt;.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fcombining-emf-models-with-xtext-dsls&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Dec 2018 15:00:00 +0000</pubDate>
	<author>miklossy@itemis.de (Tamas Miklossy)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 5: Combo Boxes</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-2437011945491490661</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-5-combo-boxes.html</link>
	<description>Combo boxes are the next UI element we will add to our builder.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_05_combo_input.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_05_combo_input.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/05_combo_input&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: UI Definition&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;In the &lt;i&gt;config.jelly&lt;/i&gt; file we simply define that we want to use a combo box:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Build Delay&quot; field=&quot;buildDelay&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:select /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;The definition does not contain entries to select. These will be populated by the &lt;i&gt;Descriptor&lt;/i&gt; class.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 2: Item Definition&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Jenkins will look for a method called &lt;i&gt;doFill&amp;lt;field&amp;gt;Items&lt;/i&gt; in our &lt;i&gt;Descriptor&lt;/i&gt; class to populate the combo. We are doing a first approach now to understand the scheme:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;  public ListBoxModel doFillBuildDelayItems() {&lt;br /&gt;   ListBoxModel model = new ListBoxModel();&lt;br /&gt;   &lt;br /&gt;   model.add(new Option(&quot;None&quot;, &quot;none&quot;));&lt;br /&gt;   model.add(new Option(&quot;Short&quot;, &quot;short&quot;));&lt;br /&gt;   model.add(new Option(&quot;Long&quot;, &quot;long&quot;));&lt;br /&gt;   &lt;br /&gt;   return model;&lt;br /&gt;  }&lt;/pre&gt;&lt;i&gt;ListBoxModel&lt;/i&gt; is basically an &lt;i&gt;ArrayList&lt;/i&gt; of &lt;i&gt;Option&lt;/i&gt; instances. The first string represents the text visible to the user, the second one the value that will actually be stored in our variable (see next step).&lt;br /&gt;&lt;br /&gt;If we would populate the combo this way, the first item would always be selected by default, even if we re-open a job that was configured differently. The &lt;i&gt;Option&lt;/i&gt; constructor allows for a third parameter defining the selected state. We then just need to know the value that got stored with the job definition. Therefore we can inject the desired query parameter into our method parameters:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;  public ListBoxModel doFillBuildDelayItems(@QueryParameter String buildDelay) {&lt;br /&gt;   ListBoxModel model = new ListBoxModel();&lt;br /&gt;&lt;br /&gt;   model.add(new Option(&quot;None&quot;, &quot;none&quot;, &quot;none&quot;.equals(buildDelay)));&lt;br /&gt;   model.add(new Option(&quot;Short&quot;, &quot;short&quot;, &quot;short&quot;.equals(buildDelay)));&lt;br /&gt;   model.add(new Option(&quot;Long&quot;, &quot;long&quot; , &quot;long&quot;.equals(buildDelay)));&lt;br /&gt;&lt;br /&gt;   return model;&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;Now &lt;i&gt;buildDelay&lt;/i&gt; contains the value that got stored by the user when the build step was originally configured. By comparing its string representation we can set the right option in the combo. Typically combo options could be populated from an Enum. To reduce the risk of typos we could write a small helper to create our &lt;i&gt;Options&lt;/i&gt;: &lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; public static Option createOption(Enum&amp;lt;?&amp;gt; enumOption, String jobOption) {&lt;br /&gt;  return new Option(enumOption.toString(), enumOption.name(), enumOption.name().equals(jobOption));&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;Step 3: Glueing it all together&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Finally we need to extend our constructor with the new parameter. Then we can use it in our build step:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private String fBuildDelay;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild, String buildMessage, String buildDelay) {&lt;br /&gt;  fBuildDelay = buildDelay;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt;  listener.getLogger().println(getBuildMessage());&lt;br /&gt;&lt;br /&gt;  switch (getBuildDelay()) {&lt;br /&gt;  case &quot;long&quot;:&lt;br /&gt;   Thread.sleep(10 * 1000);&lt;br /&gt;   break;&lt;br /&gt;&lt;br /&gt;  case &quot;short&quot;:&lt;br /&gt;   Thread.sleep(3 * 1000);&lt;br /&gt;   break;&lt;br /&gt;&lt;br /&gt;  case &quot;none&quot;:&lt;br /&gt;   // fall through&lt;br /&gt;  default:&lt;br /&gt;   // nothing to do&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getBuildDelay() {&lt;br /&gt;  return fBuildDelay;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 03 Dec 2018 14:59:41 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 4: Unit Tests</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-3716468409058011391</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-4-unit-tests.html</link>
	<description>Now that our builder plugin is working we should start writing some unit tests for it.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_04_unit_test.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_04_unit_test.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/04_unit_test&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Wrinting a simple test case&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Jenkins tests can be written as JUnit tests. The test instance needed for execution tests can be created using a &lt;i&gt;JUnit Rule&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Create a new &lt;i&gt;JUnit Test Case&lt;/i&gt; &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilderTes&lt;/i&gt;t in the &lt;i&gt;src/test/java&lt;/i&gt; folder:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilderTest {&lt;br /&gt;&lt;br /&gt; @Rule&lt;br /&gt; public JenkinsRule fJenkinsInstance = new JenkinsRule();&lt;br /&gt; &lt;br /&gt; @Test&lt;br /&gt; public void successfulBuild() throws Exception {&lt;br /&gt;  HelloBuilder builder = new HelloBuilder(false, &quot;JUnit test run&quot;);&lt;br /&gt;  &lt;br /&gt;  FreeStyleProject job = fJenkinsInstance.createFreeStyleProject();&lt;br /&gt;  job.getBuildersList().add(builder);&lt;br /&gt;  FreeStyleBuild build = fJenkinsInstance.buildAndAssertSuccess(job);&lt;br /&gt;  &lt;br /&gt;  fJenkinsInstance.assertLogContains(&quot;JUnit test run&quot;, build);&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;In line 4 we create a test instance for our unit test. This instance is used from line 10 onwards to create and run our test job. The instance provides a set of assertion commands which we use to check the build result and the log output of the job execution.&lt;br /&gt;&lt;br /&gt;You can run these tests as JUnit tests right from Eclipse or you can execute them via maven by running&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn test&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: A test expecting an execution fail&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We use the same approach as before. To check for a failed build we need to run the build job a little bit different:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; @Test&lt;br /&gt; public void failedBuild() throws Exception {&lt;br /&gt;  HelloBuilder builder = new HelloBuilder(true, &quot;JUnit test fail&quot;);&lt;br /&gt;  &lt;br /&gt;  FreeStyleProject job = fJenkinsInstance.createFreeStyleProject();&lt;br /&gt;  job.getBuildersList().add(builder);&lt;br /&gt;  QueueTaskFuture&amp;lt;FreeStyleBuild&amp;gt; buildResult = job.scheduleBuild2(0);&lt;br /&gt;  &lt;br /&gt;  fJenkinsInstance.assertBuildStatus(Result.FAILURE, buildResult);&lt;br /&gt;  fJenkinsInstance.assertLogContains(&quot;JUnit test fail&quot;, buildResult.get());&lt;br /&gt; }&lt;/pre&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 03 Dec 2018 14:18:12 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Maximilian and Jonas: Eclipse Che vs. Eclipse Theia</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40696</guid>
	<link>https://eclipsesource.com/blogs/2018/12/03/eclipse-che-vs-eclipse-theia/</link>
	<description>&lt;p&gt;In this article, we compare Eclipse Che with Eclipse Theia and explain their relationship – their differences and their overlap. In...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/03/eclipse-che-vs-eclipse-theia/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Che vs. Eclipse Theia&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 03 Dec 2018 10:34:54 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.6.0 released !</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-0-released</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-6-0-released</link>
	<description>&lt;article&gt;&lt;p&gt;We are pleased to announce the Eclipse Vert.x 3.6.0 release.&lt;/p&gt;
&lt;p&gt;As always, the community contributions have been key in achieving this milestone. 
To all of you who participated: thank you, you are awesome!&lt;/p&gt;
&lt;p&gt;Without further ado, let’s take a look at some of the most exciting new features and enhancements.  &lt;/p&gt;
&lt;h4 id=&quot;vert-x-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/h4&gt;
&lt;p&gt;In this release we introduce the &lt;a href=&quot;https://github.com/vert-x3/vertx-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/a&gt;, an extension for interation with &lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The client supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prepared queries&lt;/li&gt;
&lt;li&gt;batching&lt;/li&gt;
&lt;li&gt;query streaming&lt;/li&gt;
&lt;li&gt;bulk fetching&lt;/li&gt;
&lt;li&gt;low level fetching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To give you an idea of how the API usage may looks like, we provide this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;cassandraClient.queryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT my_string_col FROM my_keyspace.my_table where my_key = 'my_value'&quot;&lt;/span&gt;, queryStream -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (queryStream.succeeded()) {
    CassandraRowStream stream = queryStream.result();

    &lt;span class=&quot;hljs-comment&quot;&gt;// resume stream when queue is ready to accept buffers again&lt;/span&gt;
    response.drainHandler(v -&amp;gt; stream.resume());

    stream.handler(row -&amp;gt; {
        String value = row.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_string_col&quot;&lt;/span&gt;);
        response.write(value);

        &lt;span class=&quot;hljs-comment&quot;&gt;// pause row stream when we buffer queue is full&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.writeQueueFull()) {
        stream.pause();
        }
    });

    &lt;span class=&quot;hljs-comment&quot;&gt;// end request when we reached end of the stream&lt;/span&gt;
    stream.endHandler(end -&amp;gt; response.end());

    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    queryStream.cause().printStackTrace();
    &lt;span class=&quot;hljs-comment&quot;&gt;// response with internal server error if we are not able to execute given query&lt;/span&gt;
    response
        .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)
        .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to execute the query&quot;&lt;/span&gt;);
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vert-x-for-kotlin&quot;&gt;Vert.x for Kotlin&lt;/h4&gt;
&lt;p&gt;Vert.x for Kotlin has been updated to the very recent Kotlin 1.3 (and coroutines 1.0).&lt;/p&gt;
&lt;p&gt;Vert.x 3.5 introduced a powerful way to write synchronous non-blocking code with Kotlin coroutines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt;&amp;gt; { client.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(id) }, it) };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this release, &lt;code&gt;awaitResult&lt;/code&gt; idiom as extension methods are provided, so now you can directly write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = client.queryWithParamsAwait(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(id) })&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;Await&lt;/code&gt; suffix: all Vert.x asynchronous methods provide now an &lt;em&gt;awaitified&lt;/em&gt; extension.&lt;/p&gt;
&lt;h4 id=&quot;web-api-gateways&quot;&gt;Web API gateways&lt;/h4&gt;
&lt;p&gt;The new &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;Vert.x Web API Service&lt;/a&gt; module allows you to
 create &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;Vert.x Web API Contract&lt;/a&gt; gateways.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Web API Service Architecture&quot; src=&quot;http://vertx.io/assets/blog/vertx-web-api-service/vertx-web-api-service.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@WebApiServiceGen&lt;/code&gt; can annotate your service interface to handle
&lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI 3&lt;/a&gt;: &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;Vert.x Web API Service&lt;/a&gt;
requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@WebApiServiceGen&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String from, String to, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;putTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(JsonObject body, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; web router becomes an API gateway sending requests directly to your services.&lt;/p&gt;
&lt;p&gt;These services are powered by the Vert.x &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#event_bus&quot;&gt;event bus&lt;/a&gt; and benefits
 from features like load balancing and clustering.&lt;/p&gt;
&lt;p&gt;Check the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;complete documentation&lt;/a&gt; for more details (a tutorial post is coming soon!)&lt;/p&gt;
&lt;h4 id=&quot;web-client&quot;&gt;Web Client&lt;/h4&gt;
&lt;p&gt;Our beloved &lt;a href=&quot;https://vertx.io/docs/vertx-web-client/java/&quot;&gt;WebClient&lt;/a&gt; is now capable of handling client sessions. The
&lt;code&gt;WebClientSession&lt;/code&gt; is a client extension that is very helpful when you need to manage cookies on the client side.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The session is created per user&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// from now on cookies are handled by the session&lt;/span&gt;
WebClientSession session = WebClientSession.create(client);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cherry on the cake, the web client is now capable of performing server side response checks using &lt;em&gt;response predicates&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .expect(ResponsePredicate.SC_SUCCESS)
  .expect(ResponsePredicate.JSON)
  .send(result -&amp;gt; { ... });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server side response must validate the expectations defined before sending the request in order to make the response
successful, relieving the user code to perform these checks manually. Of course many out of box expecations are provided
and you can always create your own to implement custom checks.&lt;/p&gt;
&lt;h4 id=&quot;use-templating-everywhere&quot;&gt;Use templating everywhere&lt;/h4&gt;
&lt;p&gt;Template engines can now be used outside the realm of Vert.x Web.
One great use case is to use them to generate email content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;TemplateEngine template = ...

template.render(new JsonObject(), &quot;my-template.txt, res -&amp;gt; {
   // Send result with the Vert.x Mail client
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;openid-connect-discovery&quot;&gt;OpenID Connect Discovery&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://vertx.io/docs/vertx-auth-oauth2/java/&quot;&gt;Oauth2&lt;/a&gt; has been greatly enhanced to support more of OpenID Connect, the most noticible is the support of &lt;code&gt;OpenID Connect Discovery 1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What this means for the end user is that, configuration is now a trivial task, as it is “&lt;em&gt;discoverd&lt;/em&gt;“ from the server, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenIDConnectAuth.discover(vertx,
  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OAuth2ClientOptions()
    .setSite(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://accounts.google.com&quot;&lt;/span&gt;)
    .setClientID(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clientId&quot;&lt;/span&gt;),
  res -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// the setup call succeeded.&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// at this moment your auth is ready to use and&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// google signature keys are loaded so tokens can be decoded and verified.&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// the setup failed.&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know your &lt;strong&gt;clientId&lt;/strong&gt; and your provider server URL (of course), all the remaining endoints, key signature algorithms and &lt;em&gt;JSON Web Keys&lt;/em&gt; are “discovered” for you and
configured to the auth provider.&lt;/p&gt;
&lt;h4 id=&quot;password-hashing-strategy&quot;&gt;Password Hashing strategy&lt;/h4&gt;
&lt;p&gt;Vert.x auth components now support user defined password hashing strategies, If you’re not happy with the provided implementations: &lt;code&gt;SHA512&lt;/code&gt; or &lt;code&gt;PKDBF2&lt;/code&gt; you can now provide your own strategy
so it can be used with &lt;code&gt;JDBC&lt;/code&gt; or &lt;code&gt;Mongo&lt;/code&gt; auth.&lt;/p&gt;
&lt;p&gt;The hash verification algorithm has been improved to be time constant, regardless of the result, which protects Vert.x
applications from hash timing attacks.&lt;/p&gt;
&lt;h4 id=&quot;externalized-configuration-of-vert-x-options&quot;&gt;Externalized configuration of Vert.x options&lt;/h4&gt;
&lt;p&gt;Whether you run your Vert.x app with the CLI or as an executable JAR with the &lt;code&gt;Launcher&lt;/code&gt;, you can now provide Vert.x
options as a command line parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java -jar &lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-app.jar -options /path/&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;/&lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with the CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;vertx &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-verticle.js -options /path/&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;/&lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly useful for complex clustered event-bus setups (encryption, public host vs cluster host…).&lt;/p&gt;
&lt;h4 id=&quot;and-more-&quot;&gt;And more…&lt;/h4&gt;
&lt;p&gt;Here are some other important improvements you can find in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 11 support (unless a Vert.x module depends on a third-party dependency that does not support it yet)&lt;/li&gt;
&lt;li&gt;Hazelcast Cluster Manager &lt;a href=&quot;http://vertx.io/docs/vertx-hazelcast/java/#_using_lite_members&quot;&gt;support for lite members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api/&quot;&gt;Simplified database transaction management&lt;/a&gt; with the Vert.x &lt;em&gt;Rxified&lt;/em&gt; API&lt;/li&gt;
&lt;li&gt;Event-bus interceptors&lt;/li&gt;
&lt;li&gt;Documentation improvements&lt;ul&gt;
&lt;li&gt;Cluster administration with &lt;a href=&quot;http://vertx.io/docs/vertx-infinispan/java/#_cluster_administration&quot;&gt;Infinispan&lt;/a&gt; and &lt;a href=&quot;http://vertx.io/docs/vertx-hazelcast/java/#_cluster_administration&quot;&gt;Hazelcast&lt;/a&gt; cluster managers&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rxified&lt;/em&gt; API in the Vert.x &lt;a href=&quot;http://vertx.io/docs/vertx-kafka-client/java/#_rxjava_2_api&quot;&gt;Kafka&lt;/a&gt;, &lt;a href=&quot;http://vertx.io/docs/vertx-web-client/java/#_rxjava_2_api&quot;&gt;Web&lt;/a&gt; and &lt;a href=&quot;http://vertx.io/docs/vertx-mongo-client/java/#_rxjava_2_api&quot;&gt;Mongo&lt;/a&gt; clients&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance improvements&lt;/li&gt;
&lt;li&gt;And obviously we have the usual bug fixes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.0-Release-Notes&quot;&gt;3.6.0 release notes&lt;/a&gt; can be found on the wiki, as well as the list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.6.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Read the newest Jakarta EE Newsletter!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/dt1O2kBXgo4/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/dt1O2kBXgo4/</link>
	<description>This month we bring you a fully loaded Jakarta EE newsletter with a mix of technical content, community news, and a tutorial!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/dt1O2kBXgo4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 30 Nov 2018 14:15:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Specification Process, Part III: Creation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/BW1bPhgIRzI/eclipse-foundation-specification-process-part-iii-creation</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/BW1bPhgIRzI/eclipse-foundation-specification-process-part-iii-creation</link>
	<description>Creation' is an integral part of the Eclipse Foundation Specification Process. Read Wayne Beaton's newest blog on the topic.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/BW1bPhgIRzI&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 30 Nov 2018 14:15:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms 1.18.0 Feature: Label Layouting</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40082</guid>
	<link>https://eclipsesource.com/blogs/2018/11/29/emf-forms-1-18-0-feature-label-layouting/</link>
	<description>&lt;p&gt;EMF Forms makes it easy to create forms that are capable of editing your data based on an EMF model. To...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/11/29/emf-forms-1-18-0-feature-label-layouting/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms 1.18.0 Feature: Label Layouting&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 29 Nov 2018 10:34:57 +0000</pubDate>
</item>
<item>
	<title>William Candillon: Hello world!</title>
	<guid isPermaLink="false">http://xqdt.org?p=1</guid>
	<link>http://xqdt.org/2018/11/29/hello-world/</link>
	<description>&lt;p&gt;WordPress へようこそ。これは最初の投稿です。編集もしくは削除してブログを始めてください !&lt;/p&gt;</description>
	<pubDate>Thu, 29 Nov 2018 09:56:15 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Specification Process, Part III: Creation</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5466</guid>
	<link>https://waynebeaton.wordpress.com/2018/11/28/eclipse-foundation-specification-process-part-iii-creation/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) includes an &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-creation&quot;&gt;image&lt;/a&gt; that provides an overview of what goes into creating a new &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-projects&quot;&gt;Specification Project&lt;/a&gt;. By &lt;em&gt;creating&lt;/em&gt;, we mean the process of taking a &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-specifications&quot;&gt;Specification&lt;/a&gt; from an initial idea or concept through to the point where the necessary resources and permissions are in place to do real development. It’s the same basic process that we follow when creating a regular Eclipse Project with an extra Specifications-specific approval added in.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;creation&quot; class=&quot;alignnone size-full wp-image-5465&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/11/creation.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The first couple of steps of the project creation process usually happen via private email exchanges between the people involved with the project and the &lt;em&gt;Eclipse Management Organization&lt;/em&gt; (EMO) (this is one of the few things that we do in private at the Eclipse Foundation). With this communication, we take the idea behind a Specification Project and create a Proposal that describes and defines it. The Proposal includes important information like a statement of Scope, a description, and the list of the initial Specification Team (&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#4_6_2_PL&quot;&gt;Project Leads&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-committers&quot;&gt;Committers&lt;/a&gt;, and &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_1_Mentors&quot;&gt;Mentors&lt;/a&gt;). Other useful information is contained the Proposal, including background information, descriptions of content that already exists, and initial plans.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In the steady state (i.e. after the Specification Project has been created), all roles are assigned via demonstrations of merit and votes from the existing Committers. Since we have no existing Committers before the project is created, the creation process serves as the display of merit for the community and vote.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The EMO works with the proposers to whip the Proposal into shape. When the EMO decides that the content is complete, it is delivered to the Executive Director of the Eclipse Foundation (EMO(ED)) for approval to post for community review.&lt;/p&gt;
&lt;p&gt;Once we have EMO(ED) approval and the Proposal is posted for the community to review, it is said—according to the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP)—to have entered the &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_2_2_Proposal&quot;&gt;Proposal Phase&lt;/a&gt;&lt;/em&gt;. We often refer to this as the &lt;em&gt;community review period&lt;/em&gt;. During this period, other developers may step up and volunteer to become Committers, community members may ask questions, the Scope and other aspects of the Proposal may be tweaked, and more. Crucially, during this period, Member Companies of the Eclipse Foundation have an opportunity to express concerns and even (possibly) reject the Project Proposal (this has never actually happened). A Specification Project must stay in the Proposal Phase for a minimum of two weeks to give the various stakeholders enough time to review and respond.&lt;/p&gt;
&lt;p&gt;The EMO uses the Proposal Phase to ensure that we can reasonably assert ownership of the Specification Project’s name as a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#trademarks-background&quot;&gt;trademark&lt;/a&gt; on behalf of the community (or at least that the project name does not infringe on somebody else’s trademark). If a Specification Project’s name is already used by the Specification Team (or an organization that’s involved with the Proposal), then EMO will work with them to transfer ownership of the trademark and associated Internet domains to the Eclipse Foundation. In parallel, the EMO will also work with the Eclipse Architecture Council to identify a Mentor, and seek approval from the Project Management Committee (PMC) of the target Top-level Project. It’s not shown on the image, but we’d use this time to inform the corresponding &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-committee&quot;&gt;Specification Committee&lt;/a&gt; that the new Specification Project is coming.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;At the Eclipse Foundation, we organize all Projects and Specification Projects hierarchically. Top-level Projects, which sit at the the top level of the hierarchy, are generally not used for actual development work. It is in the Projects (also referred to as Subprojects) under the Top-level Projects where the &lt;em&gt;real&lt;/em&gt; work happens. All Top-level Projects have a PMC who—as part of the Project Leadership Chain for all projects that fall under the Top-level Project—are responsible for ensuring that the Specification Teams work as good open source projects (as defined by the EDP).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When all of these separate threads are resolved, we move to the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-creation&quot;&gt;Creation Review&lt;/a&gt;. During this period, no further changes are allowed and the Proposal is locked down. The EMO uses this time to ensure that the process was followed. The Creation Review lasts for a minimum of one week. We schedule all reviews—Creation Reviews included—based on the date that they conclude; reviews are scheduled to conclude on the first and third Wednesday of every month (we may schedule additional reviews in exceptional cases).&lt;/p&gt;
&lt;p&gt;To successfully complete a Creation Review for a Specification Project, the EFSP requires that we have &lt;em&gt;Super-majority&lt;/em&gt; approval of the Specification Committee (Super-majority is defined as two thirds of the Specification Committee members). The EFSP is silent regarding the specifics of how such a vote is executed, but is generally accepted that votes run for a minimum of a week (a Specification Committee may decide that more or less time is required). The factors that the Specification Committee must consider when casting their votes are also not specified. In general though, the Specification Committee will be looking at whether or not new Specification Project Proposals are viable and are a good fit with the corresponding Working Group.&lt;/p&gt;
&lt;p&gt;Upon successful conclusion of the Creation Review, the Proposal is sent to the Eclipse &lt;em&gt;Webmaster Team&lt;/em&gt; for provisioning. The provisioning process starts with &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#paperwork&quot;&gt;Committer Paperwork&lt;/a&gt;: once we have complete paperwork for one Committer, the Webmaster will create resources including websites, Git repositories, Issue trackers, etc. for the Specification Team.&lt;/p&gt;
&lt;p&gt;With provisioned Committers and resources, the Specification Project is said to be in the &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_2_3_Incubation&quot;&gt;Incubation Phase&lt;/a&gt;&lt;/em&gt; (or “in incubation”); it will stay in this phase until the Specification Team engages in a &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_3_2_Graduation_Review&quot;&gt;Graduation Review&lt;/a&gt; (which is generally combined with the project’s first or second Release and corresponding &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-release&quot;&gt;Release Review&lt;/a&gt;). The first action of the Specification Team with their new Specification Project is to submit their &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-initial-contribution&quot;&gt;Initial Contribution&lt;/a&gt; (when a Specification comes to the Eclipse Foundation with existing intellectual property) to the Eclipse IP Team for review; with their approval of the Initial Contribution, that content can be added to the project’s Git repository and the Specification Team can start to weave their magic.&lt;/p&gt;
&lt;p&gt;For more background, please see &lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/&quot;&gt;Part I&lt;/a&gt;, and &lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/26/eclipse-foundation-specification-process-part-ii-the-efsp/&quot;&gt;Part II&lt;/a&gt; of this series.&lt;/p&gt;</description>
	<pubDate>Wed, 28 Nov 2018 16:22:31 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 3: Text Input &amp; Validation</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-604671243835936878</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-3-text-input-validation.html</link>
	<description>Our builder UI is progressing: today we will add a text box with nice defaults and add input validation to it.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_03_text_input.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_03_text_input.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/03_text_input&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;&lt;u&gt;Step 1: The Text Box&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Adding a text box is as simple as adding the checkbox before. Add a new entry to the &lt;i&gt;config.jelly&lt;/i&gt; file:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Custom build message&quot; field=&quot;buildMessage&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:textbox /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;Make sure you use a unique ID for &lt;i&gt;field&lt;/i&gt;. Then add the new field to your builder by adding it to the constructor and create a getter for it:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private String fBuildMessage;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild, String buildMessage) {&lt;br /&gt;  fFailBuild = failBuild;&lt;br /&gt;  fBuildMessage = buildMessage;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(getBuildMessage());&lt;br /&gt;  &lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getBuildMessage() {&lt;br /&gt;  return fBuildMessage;&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;All done, give it a try!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Default Value&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Some example data might help our users when filling out the buid parameters. Therefore lets provide a nice default value. This is done by adding a &lt;i&gt;default&lt;/i&gt; attribute to the textbox:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;f:textbox default=&quot;${descriptor.getDefaultBuildMessage()}&quot; /&amp;gt;&lt;/pre&gt;We could have provided the default text directly in the attribute data. Instead we decided to fetch the default dynamically from the &lt;i&gt;Descriptor&lt;/i&gt; class. No magic data binding here, so we need to implement the method:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;  &lt;br /&gt;  public String getDefaultBuildMessage() {&lt;br /&gt;   return &quot;This is a great build&quot;;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;u&gt;&lt;b&gt;Step 3: Input Validation&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;Having no build message would result in an empty log file, which is not what we want. With input validation we can force users to enter some text to the input box. Validation is done by providing a validator in the &lt;i&gt;Descriptor&lt;/i&gt; class:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;&lt;br /&gt;  public FormValidation doCheckBuildMessage(@QueryParameter String buildMessage) {&lt;br /&gt;   if (buildMessage.isEmpty())&lt;br /&gt;    return FormValidation.error(&quot;Please provide a build message.&quot;);&lt;br /&gt;   else if (buildMessage.trim().isEmpty())&lt;br /&gt;    return FormValidation.error(&quot;White space is not sufficient for a build message.&quot;);&lt;br /&gt;   else&lt;br /&gt;    return FormValidation.ok();&lt;br /&gt;  }&lt;br /&gt; }&lt;/pre&gt;The method name needs to stick to the pattern &lt;i&gt;doCheck&amp;lt;Parameter&amp;gt;&lt;/i&gt;. Normally you would only provide the parameter in question to that method (again the parameter name needs to match your &lt;i&gt;field&lt;/i&gt; ID) but if needed you could add parameters for other fields of the builder. This comes in handy when parameters depend on each other.</description>
	<pubDate>Wed, 28 Nov 2018 10:07:21 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 2: A Builder Plugin &amp; Some Jelly</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-7581451498191257505</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-2-builder-plugin-some-jelly.html</link>
	<description>In the previous tutorial we did the basic setup for jenkins plugin development. Now we will try to create a plugin that actually runs a build step.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_02_builder_plugin.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_02_builder_plugin.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/02_builder_plugin&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: The Basic Builder&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Maven allows to create a nice template for a builder plugin by calling&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn archetype:generate -Dfilter=io.jenkins.archetypes:&lt;/pre&gt;then select the &lt;i&gt;hello-world-plugin&lt;/i&gt;. But as we want to do it the hard way, we will add every single bit on our own and continue with the &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/01_empty_plugin&quot; target=&quot;_blank&quot;&gt;empty project&lt;/a&gt; from our &lt;a href=&quot;https://codeandme.blogspot.com/2018/11/jenkins-1-ide-setup-and-empty-plugin.html&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The first thing we need is a class to implement our builder. Lets create a simple one. Create a new class &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilder&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;package com.codeandme.jenkins.builder;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;&lt;br /&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder() {&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Symbol(&quot;hello&quot;)&lt;br /&gt; @Extension&lt;br /&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public boolean isApplicable(Class&amp;lt;? extends AbstractProject&amp;gt; aClass) {&lt;br /&gt;   return true;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public String getDisplayName() {&lt;br /&gt;   return &quot;Code &amp;amp; Me - Hello World&quot;;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Jenkins expects the constructor to be augmented with the &lt;i&gt;@DataBoundConstructor&lt;/i&gt; annotation. Later we will add our build parameters to it.&lt;br /&gt;&lt;br /&gt;The &lt;i&gt;perform()&lt;/i&gt; method is the heart of our implementation. This is where we define what the build step should actually do. In this tutorial we focus on the definition, not the execution so we are just printing some log message to detect that our build step got triggered.&lt;br /&gt;&lt;br /&gt;Now lets put our focus on the &lt;i&gt;Descriptor&lt;/i&gt; class. It actually describes what our plugin looks like, what parameter it uses and whether the user input is valid or not. You need to use a static class as a descriptor and augment it with the &lt;i&gt;@Extension&lt;/i&gt; annotation to allow jenkins to detect it automatically.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;isApplicable()&lt;/i&gt; might be the most important one as it denotes if ou plugin is usable for the current project type.&lt;br /&gt;&lt;br /&gt;Start a jenkins test server using&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn hpi:run -Djetty.port=8090&lt;/pre&gt;Create a new &lt;i&gt;Freestyle Project&lt;/i&gt; and add your custom build step to it. Then execute the job and browse the log for our log message.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Basic UI&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Next we need a &lt;i&gt;*.jelly&lt;/i&gt; file to describe how the UI should look like. Therefore create a new package in &lt;i&gt;src/main/resources&lt;/i&gt; named &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilder&lt;/i&gt;. That is right, the package equals the class name of our builder class. Then create a &lt;i&gt;config.jelly&lt;/i&gt; file inside that package:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;?jelly escape-by-default='true'?&amp;gt;&lt;br /&gt;&amp;lt;j:jelly xmlns:j=&quot;jelly:core&quot; xmlns:st=&quot;jelly:stapler&quot; xmlns:d=&quot;jelly:define&quot; xmlns:l=&quot;/lib/layout&quot; xmlns:t=&quot;/lib/hudson&quot; xmlns:f=&quot;/lib/form&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;f:block&amp;gt;&lt;br /&gt;  &amp;lt;h1&amp;gt;Code &amp;amp;amp; Me Productions&amp;lt;/h1&amp;gt;&lt;br /&gt;  &amp;lt;p&amp;gt;We build the best &amp;lt;i&amp;gt;hellos&amp;lt;/i&amp;gt; in the world&amp;lt;/p&amp;gt;&lt;br /&gt; &amp;lt;/f:block&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/j:jelly&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Inside the jelly definition we can use plain HTML code. Run your test instance again to see your changes in your project configuration view.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Checkbox Input&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Time to add some input. All build parameters need at least 2 steps of implementation: first we need to define the UI in the &lt;i&gt;config.jelly&lt;/i&gt; file, then we need to define the parameters in the java class. Optionally we may add additional checks in the Descriptor class.&lt;br /&gt;&lt;br /&gt;To define the UI for the checkbox we add following code to our jelly file:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Fail this build&quot; field=&quot;failBuild&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:checkbox /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;This will create a label using the &lt;i&gt;title&lt;/i&gt; field and a checkbox on the right side of the label. The &lt;i&gt;field&lt;/i&gt; name is important as this is the ID of our field which we now use in the Java code:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private boolean fFailBuild;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild) {&lt;br /&gt;  fFailBuild = failBuild;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt;&lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean isFailBuild() {&lt;br /&gt;  return fFailBuild;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new parameter needs to be added to our constructor. Make sure you use the same name as in the jelly file. Additionally we need a getter for our parameter. It will be queried to populate the UI when you configure your job and when the job gets executed. Jenkins expects the name of the getter to match the field name of your jelly file.&lt;br /&gt;&lt;br /&gt;During the build we evaluate our parameter and throw an &lt;i&gt;AbortException&lt;/i&gt; in case our builder is expected to fail.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Adding Help&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Lots of parameters in Jenkins plugins show a help button on the righthand side of the form. These buttons automatically appear when corresponding help files exist in the right location.&lt;br /&gt;&lt;br /&gt;A general help file for the builder named &lt;i&gt;help.html&lt;/i&gt; needs to be placed next to the &lt;i&gt;config.jelly&lt;/i&gt; file. You may add any arbitrary HTML content there, with no need to use &lt;i&gt;&amp;lt;html&amp;gt;&lt;/i&gt; or &lt;i&gt;&amp;lt;body&amp;gt;&lt;/i&gt; tags.&lt;br /&gt;&lt;br /&gt;To provide help for our checkbox we create another help file named &lt;i&gt;help-failBuild.html&lt;/i&gt;. See the pattern? We again use the field ID and Jenkins figures out the rest.&lt;br /&gt;&lt;br /&gt;Instead of a plain HTML files we could also &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins#BasicguidetoJellyusageinJenkins-Helpfiles&quot; target=&quot;_blank&quot;&gt;provide jelly files&lt;/a&gt; following the same name pattern.&lt;br /&gt;&lt;br /&gt;Changes like adding help or beautifying jelly files can be done without restarting our test instance. Simply change the file and reload the page in your webbrowser of your test instance.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Further reading&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good documentation on writing forms seems to be rare on the internet. To me the best choice seems to be to find an existing plugin and browse the source code for reference. At least a &lt;a href=&quot;https://reports.jenkins.io/core-taglib/jelly-taglib-ref.html#form&quot; target=&quot;_blank&quot;&gt;list of all control types&lt;/a&gt; is available online.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 28 Nov 2018 09:21:30 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>

</channel>
</rss>
