<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>itemis: Xtext 2.14 released!</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-2-14-released</guid>
	<link>https://blogs.itemis.com/en/xtext-2-14-released</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Xtext team proudly announces the availability of the 2.14 release. While the previous releases have focused on performance and internal improvements this release comes with a bunch of &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html&quot;&gt;&lt;span&gt;new features&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that will ease your life and make your DSLs even more valuable. We encourage to update to this release. Xtext 2.14 will also be part of the upcoming Eclipse Photon release &lt;/span&gt;&lt;a href=&quot;https://wiki.eclipse.org/Photon/Simultaneous_Release_Plan#Schedule&quot;&gt;&lt;span&gt;scheduled for June 27&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Update-handwritten&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Update-handwritten.jpg?t=1527084189178&amp;amp;width=938&amp;amp;name=Update-handwritten.jpg&quot; style=&quot;width: 938px;&quot; width=&quot;938&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Of course 2.14 provides full compatibility with the recent Java 9 and 10 releases. Quite a lot of effort went into this support as Xtext is not the only part that needed adoption. We heavily rely on JDT, Gradle, Maven and Maven Tycho which all had to be compatible before.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The new version is fully compatible with your existing languages. To best employ the new features after the upgrade, we recommend to use the Xtext Project Wizard to create new projects with an up-to-date configuration and compare the setup with your existing language. For example, for Java 10 support, we had to upgrade the ASM library to version 6.1.1 and so do you.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The brand &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.8/M5/#Platform-Dev&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new Code Mining API from Eclipse Photon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is supported by Xtext 2.14, too. To give it a try, you’ll need Eclipse Photon. You should use the &lt;/span&gt;&lt;a href=&quot;http://download.eclipse.org/eclipse/downloads/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;latest Eclipse 4.8 Integration Build&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Domain-Model Example DSL contains a sample implementation for Code Minings and serves as a blueprint if you plan to implement your own. This is how it looks like in action:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Code-Mining-API-Eclipse-Photon-Xtext&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-API-Eclipse-Photon-Xtext.gif?t=1527084189178&amp;amp;width=484&amp;amp;name=Code-Mining-API-Eclipse-Photon-Xtext.gif&quot; style=&quot;width: 484px;&quot; width=&quot;484&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;As the Code Mining implementation in Eclipse is still under development, its inventor &lt;/span&gt;&lt;a href=&quot;https://twitter.com/angelozerr&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Angelo Zerr&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is happy to get your feedback, too. Fame and fortune is to come if you &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Platform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;report bugs&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to the Platform Text component in time so they can be fixed for the Photon release.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We also &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/xtext-2.14-adds-support-for-junit-5&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;updated the testing infrastructure&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The JUnit support has been extended so you can execute tests written with &lt;/span&gt;&lt;a href=&quot;https://junit.org/junit5/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JUnit 5&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Xtext Project Wizard allows you now to select JUnit 5 for testing support and will produce a sample parser test and add the required dependencies.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-New-Project-Wizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-New-Project-Wizard.gif?t=1527084189178&amp;amp;width=614&amp;amp;name=Xtext-New-Project-Wizard.gif&quot; style=&quot;width: 614px;&quot; width=&quot;614&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Creating project and file wizards for your DSL has always been a pain point. There already &lt;span&gt;exists&lt;/span&gt; a non-well known generator fragment for an Eclipse New Project Wizard that produced a wizard which was not easily customizable. Now we have a new API and generator fragment that allows to produce &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/generating-a-new-project-wizard-with-xtext-2.14&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new project&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/new-file-wizard-easy-to-generate-with-xtext-2.14&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new file&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; wizards.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-New-Template-Wizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-New-Template-Wizard.gif?t=1527084189178&amp;amp;width=542&amp;amp;name=Xtext-New-Template-Wizard.gif&quot; style=&quot;width: 542px;&quot; width=&quot;542&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The Xtext Grammar language now supports additional annotations for parser rules:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;@Deprecated&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: This annotation marks a rule to be deprecated. Issue markers with are produced where a deprecated rule is used.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;@Final&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: A rule marked as final cannot be overridden.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;@Exported&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: With &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@Exported&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; it can be customized on grammar level, which element types are exported to the index. The customization takes effect when at least one rule in a grammar is annotated with &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@Exported&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. By doing that you can easily manage visibility of elements and safe memory.&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To enable your DSLs to run out of the box on as many editors as possible the support of the language server protocol was updated to 3.7 with VS code debug protocol 1.25.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtend 2.14 is released together with Xtext and of course also supports Java 9 and 10. In addition a &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/xtend/releasenotes.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;few more enhancements&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; are included. One nice thing to mention is the &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/xtend-2-14-unnecessary-modifiers-validation&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;detection of unnecessary modifiers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;And of course we have worked on performance improvements and have closed bugs to improve overall behaviour while adding new features.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.14 is now available on the &lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/&quot;&gt;release update site&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you have feedback please leave a comment. Suggestions for improvements, bug reports or code contributions are warmly welcome on &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext&quot;&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. And if you are interested in news about Xtext in general follow us on &lt;/span&gt;&lt;a href=&quot;https://twitter.com/xtext&quot;&gt;&lt;span&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. See you there!&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-2-14-released&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 23 May 2018 14:18:05 +0000</pubDate>
	<author>xtext@itemis.com (Xtext-Team)</author>
</item>
<item>
	<title>itemis: New File Wizard – easy to generate with Xtext 2.14</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/new-file-wizard-easy-to-generate-with-xtext-2.14</guid>
	<link>https://blogs.itemis.com/en/new-file-wizard-easy-to-generate-with-xtext-2.14</link>
	<description>&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;We have already shown on our blog &lt;a href=&quot;https://hosting.itemis.de/en/generating-a-new-project-wizard-with-xtext-2.14&quot;&gt;how to generate a new project wizard with Xtext 2.14&lt;/a&gt;. Now it's also possible to create a comparable wizard, also based on templates, for creating DSL files in existing projects.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This wizard will appear with &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.tmf.xtext&quot;&gt;Eclipse Photon in June 2018&lt;/a&gt;, but here is a quick preview.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Generating the wizard&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The wizard for new files is created in much the same way as the wizard for new projects. The following section must be inserted in the mwe2 file, which defines what is generated:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;language = StandardLanguage {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;strong&gt;fileWizard = {&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;        generate = true&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;    }&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Invoking &lt;code&gt;Run As -&amp;gt; MWE2 Workflow&lt;/code&gt; now generates the wizard and an example template.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A package &lt;code&gt;wizard&lt;/code&gt; is generated in the UI project of the language. This contains a file &lt;code&gt;MyDslFileTemplateProvider.xtend&lt;/code&gt;, where the actual name of the file depends on the name of the language. This file defines the contents of the wizard: other configurations are usually not necessary.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If only a single template is generated for a language, the wizard will have only one page. All the parameters of the template are specified on this page next to the directory and a name.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-214-new-file-wizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-214-new-file-wizard.png?t=1527084189178&amp;amp;width=511&amp;amp;name=Xtext-214-new-file-wizard.png&quot; style=&quot;width: 511px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;511&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;If there are several templates, a combo box for selecting a template will be displayed on the first page. The parameters are then configured on the optional second page.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Defining your own templates&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To adapt the &quot;Hello World&quot; example to your own language, or to add further templates, you need to adapt the &lt;code&gt;TemplateProvider&lt;/code&gt; class, which implements &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileTemplateProvider.java&quot;&gt;&lt;code&gt;IFileTemplateProvider&lt;/code&gt;&lt;/a&gt;. This returns a list of all available templates for the language via the &lt;code&gt;getFileTemplates&lt;/code&gt; method. By default, the implementation looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Adding another template therefore consists of adding a new instance to this list. The new template must be a subclass of &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/AbstractFileTemplate.java&quot;&gt;&lt;code&gt;AbstractFileTemplate&lt;/code&gt;&lt;/a&gt;. The easiest way to do this is by using the active annotatio&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;n &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/FileTemplate.xtend&quot;&gt;&lt;code&gt;File Template&lt;/code&gt;&lt;/a&gt;. This annotation allows you to specify a name, an icon and some descriptive text for the template. These specify the presentation of the template in the list of available templates in the wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So you would start something like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;@FileTemplate(label=&quot;Test&quot;, icon=&quot;file_template.png&quot;,&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;This creates a new hello world file.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;As a minimum you need to implement the &lt;code&gt;generateFile (IFileGenerator)&lt;/code&gt; method here. The passed &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileGenerator.java&quot;&gt;&lt;code&gt;IFileGenerator&lt;/code&gt;&lt;/a&gt; contains a single method, &lt;code&gt;generate (CharSequence, CharSequence),&lt;/code&gt; which you can call any number of times to create files when you close the wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For example, a call to create a simple &quot;Hello World&quot;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt; file might look like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Additional calls to &lt;code&gt;generate&lt;/code&gt; generate additional files. The parameters for the templates are defined with the same API as the project templates. The complete &quot;Hello World&quot; example looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@FileTemplate(label=&quot;Hello World&quot;, icon=&quot;file_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;description=&quot;Create a hello world for MyDsl.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;val helloName = combo(&quot;Hello Name:&quot;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[&quot;Xtext&quot;, &quot;World&quot;, &quot;Foo&quot;, &quot;Bar&quot;], &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;The name to say 'Hello' to&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Adding more templates works analogously to the project templates via an extension point, in this case via &quot;org.eclipse.xtext.ui.fileTemplate”.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The release of Eclipse Photon is still a few days away, but here is the link to the nightly update site:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fnew-file-wizard-easy-to-generate-with-xtext-2.14&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 23 May 2018 09:26:41 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>EclipseCon France 2018: Interview: Building streamed iOS and Android apps with one Java code</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3908 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/interview-building-streamed-ios-and-android-apps-one-java-code</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;&lt;em&gt;Learn more about Christopher Mindus and his talk on the iizi platform “&lt;a href=&quot;https://www.eclipsecon.org/france2018/session/building-streamed-ios-and-android-mobile-and-web-apps-one-java-code-sponsored-mindus&quot;&gt;Building streamed iOS and Android mobile and web apps with one Java code&lt;/a&gt;”. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;..The iizi platform is a Java and app streaming platform that enables developers to build a cross-platform app for Android and iOS mobile devices and a browser-based web app, using a single code base. It includes tools for WYSIWYG UI design, real-time prototyping, debugging and testing as well as for setting up a production server.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/interview-building-streamed-ios-and-android-apps-one-java-code&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/iizi.png?itok=Aw7eLul6&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 22 May 2018 14:14:03 +0000</pubDate>
</item>
<item>
	<title>itemis: Generating a new project wizard with Xtext 2.14</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/generating-a-new-project-wizard-with-xtext-2.14</guid>
	<link>https://blogs.itemis.com/en/generating-a-new-project-wizard-with-xtext-2.14</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Anyone who implements DSLs with Eclipse Xtext benefits from the fact that the necessary infrastructure is generated automatically from the grammar. This gives you an environment in which everything is provided for developing your own DSL with minimum effort. A mere grammar and two buttons later, you can start Eclipse, full of anticipation. It first asks what kind of project you want to create. Xtext has not answered this question yet, so you have a choice.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once you have created a project, many questions arise as to how your brand-new DSL can be used… What is the file name extension? Is it a text file? Is there a wizard? An example would help, but where can I find one? Who isn’t familiar with this sort of situation?&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Previously, creating a wizard involved tedious and repetitive manual work. The requirements for wizards are not rocket science, nor is their implementation. What you want is a wizard that clearly shows how to create a special project for your DSL, ideally already containing examples. Can this be generated? Certainly it can: in Xtext 2.14 we can do exactly this.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Although this version will not be released until June 2018, together with Eclipse Photon, here is a preview.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Generating the wizard&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Immediately after creating a new Xtext project, the project contains a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;mwe2&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; file that defines what is generated. This contains the following section of code:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;language = StandardLanguage {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    validator = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        // composedCheck =&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;org.eclipse.xtext.validation.NamesAreUniqueValidator&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; }&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;To generate the wizard, this is expanded to include a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;TemplateProjectWizard&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; fragment for the wizard.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;language = StandardLanguage {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    validator = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        // composedCheck =&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;org.eclipse.xtext.validation.NamesAreUniqueValidator&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;strong&gt;projectWizard = {&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;        generate = true&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;    }&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;If the generation is triggered as normal, using a Run As -&amp;gt; MWE2 workflow, then not only are the editor, the auto-completion and so on generated, but also all the necessary extensions for the wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A wizard package is generated in the UI project for the language, which mainly contains a file &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MyDslProjectTemplateProvider.xtend&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, where the name of the file depends on the name of the language. This file defines the content of the wizard: other configurations are usually not necessary.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you open the runtime workspace directly after generation, it is possible to create new projects by opening the new wizard, for example via the main menu command File -&amp;gt; New -&amp;gt; Project. There will be a category &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MyDsl &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;with a MyDsl project, again dependent on the name of the language. If the generated names are inappropriate you can of course change them using standard Eclipse means via the plugin.xml plug-in. If you want to incorporate the wizard in an existing language and are short of new entries in plugin.xml, here is a tip. Xtext normally generates content in the file plugin.xml, which can be edited manually. However, Xtext does not overwrite this file for further generations, but instead generates another file, plugin.xml_gen. You can then manually merge the contents of the plugin.xml_gen file into the existing plugin.xml.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;OpenNewProjectWizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/OpenNewProjectWizard.png?t=1527084189178&amp;amp;width=602&amp;amp;name=OpenNewProjectWizard.png&quot; style=&quot;width: 602px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;602&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As usual, you can define a project name and location on the first page.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;img alt=&quot;NewProjectWizardSeite1&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NewProjectWizardSeite1.png?t=1527084189178&amp;amp;width=597&amp;amp;name=NewProjectWizardSeite1.png&quot; style=&quot;width: 597px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;597&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The second page offers you a selection from the defined templates. By default only a &quot;Hello World&quot; template is provided.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;img alt=&quot;NewProjectWizardTemplateSelection&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NewProjectWizardTemplateSelection.png?t=1527084189178&amp;amp;width=597&amp;amp;name=NewProjectWizardTemplateSelection.png&quot; style=&quot;width: 597px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;597&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The following optional page offers options to configure the template. The &quot;Hello World&quot; application is only an example for parameterization; it does not make much sense to parameterize it.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;NewProjectWizardTemplateConfiguration&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NewProjectWizardTemplateConfiguration.png?t=1527084189178&amp;amp;width=599&amp;amp;name=NewProjectWizardTemplateConfiguration.png&quot; style=&quot;width: 599px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;599&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;If the wizard ends with ‘Finish’, a project is created, to which the Xtext-Nature has already been assigned that contains a &quot;Hello World&quot; of the generated DSL.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;GeneratedProject-1&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/GeneratedProject-1.png?t=1527084189178&amp;amp;width=601&amp;amp;name=GeneratedProject-1.png&quot; style=&quot;width: 601px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;601&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Defining your own templates&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To adapt the &quot;Hello World&quot; example for your own language, or to add further templates, you must adapt the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;TemplateProvider&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the class that implements &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This returns a list of all available templates for the language with the method &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;getProjectTemplates&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. By default the implementation looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;class MyDslProjectTemplateProvider implements&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getProjectTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldProject]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Adding another template therefore consists of adding a new instance to this list.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;class MyDslProjectTemplateProvider implements&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getProjectTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldProject, new TestProject]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The new project must be a subclass of&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AbstractProjectTemplate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The easiest way to do this is to use the active annotation provided by&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ProjectTemplate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This annotation allows you to specify a name, an icon and a descriptive text for the template. These control the presentation of the template in the list of available templates provided by the wizard.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; &lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@ProjectTemplate(label=&quot;Test&quot;, icon=&quot;project_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Test&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This is a test project.&amp;lt;/p&amp;gt;&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldProject {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt; &lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;As a minimum, you must implement the&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generateProjects (IProjectGenerator)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;method. The transferred&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectGenerator&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contains a single method,&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generate (ProjectFactory)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;that you can call any number of times to create projects when exiting the Eclipse wizard. Xtext already provides various implementations of&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ProjectFactory&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;to create Java, plug-in or feature projects: you can of course add your own implementations here.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A call to create a simple plug-in project with a file might therefore look like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; generator.generate(new PluginProjectFactory =&amp;gt; [&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    projectName = projectInfo.projectName&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    location = projectInfo.locationPath&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    projectNatures += #[JavaCore.NATURE_ID, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                        &quot;org.eclipse.pde.PluginNature&quot;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                        XtextProjectHelper.NATURE_ID]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    builderIds += JavaCore.BUILDER_ID&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    folders += &quot;src&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    addFile('''src/Model.mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        Hello World!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    ''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;])&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Additional calls to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; create additional projects, while additional calls to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;addFile&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; create additional files in the projects.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;UI parameterization&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To avoid merely static templates you can also use the API to define a simple UI. This will then be presented to users to allow them to provide parameters for the template.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;By default the API allows you to define checkboxes, text fields and combo boxes. You can group these using &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;group&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; elements to provide an overview. The &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AbstractProjectTemplate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; class provides corresponding methods for defining the interface. A checkbox is generated by calling &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;check&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. When assigned to an instance variable it can be used in the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generateProjects&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; method to determine a user-selected value. For example, you could generate a checkbox with the following code, which suppresses the generation of a project after the user’s selection:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@ProjectTemplate(label=&quot;Test&quot;, icon=&quot;project_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Test&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This is a test project.&amp;lt;/p&amp;gt;&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class TestProject {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    val generateHello = check(&quot;Generate Hello&quot;, true)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override generateProjects(IProjectGenerator generator) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        if (generateHello.value) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;            generator.generate(new PluginProjectFactory =&amp;gt; [&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                projectName = projectInfo.projectName&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                location = projectInfo.locationPath&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                projectNatures += #[JavaCore.NATURE_ID,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                                    &quot;org.eclipse.pde.PluginNature&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                                    XtextProjectHelper.NATURE_ID]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                builderIds += JavaCore.BUILDER_ID&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                folders += &quot;src&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                addFile('''src/Model.mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                    Hello World!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                ''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;            ])&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;You can create text fields and combo boxes and use them analogously with the text and combo methods. If you need a more sophisticated wizard, you can overwrite the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;updateVariables&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;validate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; methods, as in the &quot;Hello World&quot; example. These are called after every user interaction with the UI.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;updateVariables&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; can be used to manipulate widgets, for example to enable or disable specific items when the user changes a value in the wizard. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;validate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; can return a status value to allow reporting of user input errors in the wizard as error messages.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Contribute templates via the plug-in&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Project templates are registered via an extension point. You do not get much benefit from this as a DSL developer: things only become interesting when your plug-in is extended by a third party, who can easily contribute further implementations of &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is necessary to reference the implementing class and specify the name of the grammar to which you want to contribute. This name is used to decide in which wizard the templates are displayed. The example generated by Xtext looks like this in plugin.xml.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&amp;lt;extension point=&quot;org.eclipse.xtext.ui.projectTemplate&quot;&amp;gt;&lt;br /&gt;    &amp;lt;projectTemplateProvider&lt;br /&gt;            class=&quot;org.xtext.example.mydsl.ui.wizard.MyDslProjectTemplateProvider&quot;&lt;br /&gt;            grammarName=&quot;org.xtext.example.mydsl.MyDsl&quot;&amp;gt;&lt;br /&gt;    &amp;lt;/projectTemplateProvider&amp;gt;&lt;br /&gt;&amp;lt;/extension&amp;gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;For anyone who cannot wait for Eclipse Photon, check out the nightly updates at&lt;/span&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;font-weight: 400;&quot;&gt; Just install the latest and hottest Xtext to get started.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fgenerating-a-new-project-wizard-with-xtext-2.14&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 22 May 2018 14:07:25 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>Donald Raab: Eclipse Collections 9.2 Released</title>
	<guid isPermaLink="false">https://medium.com/p/aa88b56ecacc</guid>
	<link>https://medium.com/oracledevs/eclipse-collections-9-2-released-aa88b56ecacc?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;New features, more symmetric sympathy and community contributions.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qkgxMuPMmGLG-YO0VwWnwQ.png&quot; /&gt;Good symmetry at St. Paul’s&lt;/figure&gt;&lt;blockquote&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; is a collections framework for Java. It has optimized List, Set and Map implementations with a rich and fluent API. The library provides additional data structures not found in the JDK like Bags, Multimaps and BiMaps. The framework also provides primitive versions of Lists, Sets, Bags, Stacks and Maps with a rich and fluent API. There is support for both Mutable and Immutable versions of all containers in the library.&lt;/blockquote&gt;&lt;p&gt;There were nine developers who contributed to the Eclipse Collections 9.2.0 release. I want to thank everyone who made a contribution. If this was your first contribution to an open source project and/or Eclipse Collections, congratulations and welcome!&lt;/p&gt;&lt;p&gt;The release notes for Eclipse Collections 9.2.0 are here:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.2.0&quot;&gt;https://github.com/eclipse/eclipse-collections/releases/tag/9.2.0&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Features, Features, Features!&lt;/h3&gt;&lt;p&gt;We all love new features in a framework, especially one we use on a daily basis. Since we started compiling with Java 8 in Eclipse Collections 8.0, we have been enjoying new flexibility for adding new APIs in minor releases by using default methods. Here are some of the new API additions that were added in Eclipse Collections 9.2.&lt;/p&gt;&lt;h4&gt;Welcome: flatCollectWith&lt;/h4&gt;&lt;p&gt;The first story of symmetry improvements arrives in form of &lt;em&gt;flatCollectWith &lt;/em&gt;on&lt;em&gt; RichIterable&lt;/em&gt;. We have had &lt;em&gt;flatCollect&lt;/em&gt; since version 1.0 of the framework. We have also had &lt;em&gt;collect&lt;/em&gt; and &lt;em&gt;collectWith.&lt;/em&gt; Now we have improved symmetry having both &lt;em&gt;flatCollect&lt;/em&gt; and &lt;em&gt;flatCollectWith&lt;/em&gt;. Here’s an example of code using &lt;em&gt;flatCollectWith&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void flatCollectWith()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; list = &lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(5, 4, 3, 2, 1);&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; result = &lt;br /&gt;            list.flatCollectWith(Interval::&lt;em&gt;fromTo&lt;/em&gt;, 1);&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; expected = &lt;em&gt;mList&lt;/em&gt;(&lt;br /&gt;            5, 4, 3, 2, 1,&lt;br /&gt;            4, 3, 2, 1,&lt;br /&gt;            3, 2, 1,&lt;br /&gt;            2, 1,&lt;br /&gt;            1);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, result);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: toSortedMapBy&lt;/h4&gt;&lt;p&gt;Our second story of symmetry arrives in the form of &lt;em&gt;toSortedMapBy &lt;/em&gt;on&lt;em&gt; RichIterable&lt;/em&gt;. We have had &lt;em&gt;toSortedBagBy&lt;/em&gt; since 6.0. We have had to &lt;em&gt;toSortedListBy&lt;/em&gt; and &lt;em&gt;toSortedSetBy&lt;/em&gt; since 1.0.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void toSortedMapBy()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; list =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(4, 3, 2, 1);&lt;br /&gt;    MutableSortedMap&amp;lt;Integer, Integer&amp;gt; map =&lt;br /&gt;            list.toSortedMapBy(i -&amp;gt; i % 2, k -&amp;gt; k, v -&amp;gt; v);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            SortedMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    Comparators.&lt;em&gt;byFunction&lt;/em&gt;(i -&amp;gt; i % 2),&lt;br /&gt;                    4, 2, 3, 1),&lt;br /&gt;            map);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: Bag.selectDuplicates&lt;/h4&gt;&lt;p&gt;We’ve had &lt;em&gt;selectByOccurrences&lt;/em&gt; on &lt;em&gt;Bag&lt;/em&gt; since 3.0. Now we have a short-cut for selecting all occurrences greater than one.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void selectDuplicates()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag =&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 2, 3, 3, 3);&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; duplicates =&lt;br /&gt;            bag.selectDuplicates();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(2, 2, 3, 3, 3),&lt;br /&gt;            duplicates);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: Bag.selectUnique&lt;/h4&gt;&lt;p&gt;The symmetric method to &lt;em&gt;selectDuplicates&lt;/em&gt; is &lt;em&gt;selectUnique&lt;/em&gt;. Unlike &lt;em&gt;selectDuplicates&lt;/em&gt; which returns a &lt;em&gt;Bag&lt;/em&gt;, &lt;em&gt;selectUnique&lt;/em&gt; returns a &lt;em&gt;Set&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void selectUnique()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag =&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 2, 3, 3, 3);&lt;br /&gt;    MutableSet&amp;lt;Integer&amp;gt; unique =&lt;br /&gt;            bag.selectUnique();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1),&lt;br /&gt;            unique);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: chunk (for primitive collections)&lt;/h4&gt;&lt;p&gt;The symmetry is strong in this one. We have had &lt;em&gt;chunk&lt;/em&gt; for object collections since version 1.0.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void chunk()&lt;br /&gt;{&lt;br /&gt;    IntList list = IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10);&lt;br /&gt;    RichIterable&amp;lt;IntIterable&amp;gt; chunks = list.chunk(2);&lt;br /&gt;&lt;br /&gt;    Verify.&lt;em&gt;assertSize&lt;/em&gt;(5, chunks);&lt;br /&gt;    String string = chunks.makeString(&lt;strong&gt;&quot;/&quot;&lt;/strong&gt;);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;[1, 2]/[3, 4]/[5, 6]/[7, 8]/[9, 10]&quot;&lt;/strong&gt;,&lt;br /&gt;            string);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: newEmpty (for primitive collections)&lt;/h4&gt;&lt;p&gt;We’ve had &lt;em&gt;newEmpty&lt;/em&gt; for our object collections since 1.0. The method &lt;em&gt;newEmpty&lt;/em&gt; gives you an empty version of the same collection type. Now we have the same method for primitive collections.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void newEmpty()&lt;br /&gt;{&lt;br /&gt;    MutableIntList empty1 = IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;    MutableIntList empty2 = empty1.newEmpty();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(empty1, empty2);&lt;br /&gt;    Assert.&lt;em&gt;assertNotSame&lt;/em&gt;(empty1, empty2);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: OrderedMapAdapter&lt;/h4&gt;&lt;p&gt;This is missing symmetry of a sort. We have had adapters for &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;SortedSet&lt;/em&gt;, &lt;em&gt;Collection&lt;/em&gt;, &lt;em&gt;Map&lt;/em&gt; since 1.0. While there is no &lt;em&gt;OrderedMap&lt;/em&gt; interface in Java, there is an &lt;em&gt;OrderedMap&lt;/em&gt; implementation, which is called &lt;em&gt;LinkedHashMap&lt;/em&gt;. You could always adapt a &lt;em&gt;LinkedHashMap&lt;/em&gt; as a &lt;em&gt;MutableMap&lt;/em&gt;. Now you can adapt it and get back an &lt;em&gt;OrderedMap&lt;/em&gt; or a &lt;em&gt;MutableOrderedMap&lt;/em&gt;. Of course, the next thing we will eventually want on &lt;em&gt;RichIterable&lt;/em&gt; is &lt;em&gt;toOrderedMap&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void orderedMapAdapter()&lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; keys = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(3, 2, 1);&lt;br /&gt;    MutableOrderedMap&amp;lt;Object, Object&amp;gt; orderedMap =&lt;br /&gt;            OrderedMaps.&lt;em&gt;adapt&lt;/em&gt;(&lt;br /&gt;                    keys.injectInto(&lt;br /&gt;                            new LinkedHashMap&amp;lt;&amp;gt;(),&lt;br /&gt;                            (map, each) -&amp;gt; {&lt;br /&gt;                                map.put(each, each);&lt;br /&gt;                                return map;&lt;br /&gt;                            }));&lt;br /&gt;&lt;br /&gt;    LinkedHashMap&amp;lt;Object, Object&amp;gt; expected = new LinkedHashMap&amp;lt;&amp;gt;();&lt;br /&gt;    expected.put(3, 3);&lt;br /&gt;    expected.put(2, 2);&lt;br /&gt;    expected.put(1, 1);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, orderedMap);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(keys, orderedMap.keysView().toList());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;fromTo&lt;/em&gt;(3, 1), orderedMap.toList());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Here’s an example using forEachWithIndex to populate the orderedMap.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void orderedMapAdapter()&lt;br /&gt;{&lt;br /&gt;    MutableOrderedMap&amp;lt;Integer, Integer&amp;gt; orderedMap =&lt;br /&gt;            OrderedMaps.&lt;em&gt;adapt&lt;/em&gt;(new LinkedHashMap&amp;lt;&amp;gt;());&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; keys = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(3, 2, 1);&lt;br /&gt;    keys.forEachWithIndex(orderedMap::put);&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;Object, Object&amp;gt; expected = new LinkedHashMap&amp;lt;&amp;gt;();&lt;br /&gt;    expected.put(3, 0);&lt;br /&gt;    expected.put(2, 1);&lt;br /&gt;    expected.put(1, 2);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, orderedMap);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(keys, orderedMap.keysView().toList());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;zeroTo&lt;/em&gt;(2), orderedMap.toList());&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: toStringOfItemToCount (for primitive bags)&lt;/h4&gt;&lt;p&gt;We’ve had this method available on object Bags since version 3.0. Now &lt;em&gt;toStringOfItemToCount&lt;/em&gt; is available for all primitive Bag implementations.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void toStringOfItemToCount()&lt;br /&gt;{&lt;br /&gt;    MutableIntBag bag = IntBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 2, 3, 3, 3);&lt;br /&gt;    String string = bag.toStringOfItemToCount();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;{1=1, 2=2, 3=3}&quot;&lt;/strong&gt;, string);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: Two new Collectors on Collectors2&lt;/h4&gt;&lt;p&gt;We now have &lt;em&gt;aggregateBy&lt;/em&gt; and &lt;em&gt;countByEach&lt;/em&gt; on Collectors2. The method &lt;em&gt;aggregateBy&lt;/em&gt; gives us symmetry on &lt;em&gt;Collectors2&lt;/em&gt; with the same method on &lt;em&gt;RichIterable&lt;/em&gt;. The method &lt;em&gt;countByEach&lt;/em&gt; on the other hand, currently has no equivalent implementation in the &lt;em&gt;RichIterable&lt;/em&gt; API. This method is experimental in nature, and if it proves useful enough, we may add it as a feature to &lt;em&gt;RichIterable&lt;/em&gt; in a future release.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void countByEach()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag = Arrays.&lt;em&gt;asList&lt;/em&gt;(5, 4, 3, 2, 1)&lt;br /&gt;            .stream()&lt;br /&gt;            .collect(Collectors2.&lt;em&gt;countByEach&lt;/em&gt;(Interval::&lt;em&gt;oneTo&lt;/em&gt;));&lt;br /&gt;&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; expected = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;    expected.addOccurrences(5, 1);&lt;br /&gt;    expected.addOccurrences(4, 2);&lt;br /&gt;    expected.addOccurrences(3, 3);&lt;br /&gt;    expected.addOccurrences(2, 4);&lt;br /&gt;    expected.addOccurrences(1, 5);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, bag);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;And there is more…&lt;/h4&gt;&lt;p&gt;Have a look at some of the other features and improvements listed in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.2.0&quot;&gt;release notes&lt;/a&gt;. We look forward to seeing more contributors to Eclipse Collections in the future.&lt;/p&gt;&lt;p&gt;Have fun using Eclipse Collections 9.2 and all of the new features in your Java projects!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=aa88b56ecacc&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/eclipse-collections-9-2-released-aa88b56ecacc&quot;&gt;Eclipse Collections 9.2 Released&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 21 May 2018 05:59:23 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Flamingo?!?</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1094</guid>
	<link>https://papyrusuml.wordpress.com/2018/05/18/flamingo/</link>
	<description>&lt;p&gt;I received an interesting email today. Someone asked why the logo contained a flamingo!&lt;/p&gt;
&lt;p&gt;Well, that my image is that of an Ibis, not a flamingo!&lt;/p&gt;
&lt;p&gt;An Ibis a bird that  is found in Egypt, where papyrus was used as paper (or even computers nowadays). That, and the Egyptian god &lt;a href=&quot;https://en.wikipedia.org/wiki/Thoth&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Toth&lt;/a&gt; was often depicted as a man with the head of an ibis&lt;em&gt; (I’ll let you make the link between that an me… &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt; )…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, I hope this clarifies that for everyone!&lt;/p&gt;</description>
	<pubDate>Fri, 18 May 2018 13:15:02 +0000</pubDate>
</item>
<item>
	<title>itemis: Code Mining Support in Xtext</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/code-mining-support-in-xtext</guid>
	<link>https://blogs.itemis.com/en/code-mining-support-in-xtext</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One of the most notable &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.8/M5/#Platform-Dev&quot;&gt;&lt;span&gt;new APIs in Eclipse Photon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is called Code Mining. A code mining represents content (i.e. labels and icons) that are shown within the text editor, but are not part of the text itself. For example, within a method call statement a mining could display the name of parameters, or an icon above unit test methods could be shown that runs the test on clicking it.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Code-Mining-Preview&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-Preview.jpg?t=1527084189178&amp;amp;width=720&amp;amp;name=Code-Mining-Preview.jpg&quot; style=&quot;width: 720px;&quot; width=&quot;720&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The following image illustrates such minings in Java code. The code minings are provided by the &lt;/span&gt;&lt;a href=&quot;https://github.com/angelozerr/jdt-codemining&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;jdt-codemining&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Plug-in, which the API’s inventor Angelo Zerr is developing on GitHub. This will eventually be contributed to JDT when it is mature enough.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;JDT-Code-Mining-PlugIn&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/JDT-Code-Mining-PlugIn.png?t=1527084189178&amp;amp;width=724&amp;amp;name=JDT-Code-Mining-PlugIn.png&quot; style=&quot;width: 724px;&quot; width=&quot;724&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Code Mining is a generic extension to text editors in Eclipse. The actual text to be displayed depends on the concrete language. It is up to the developers of the language tooling to implement the interface &lt;/span&gt;&lt;code&gt;org.eclipse.jface.text.codemining.ICodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and to register the provider with the &lt;/span&gt;&lt;code&gt;org.eclipse.ui.workbench.texteditor.codeMiningProviders&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; extension point.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext’s integration of the Code Mining API&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt;With version 2.14 t&lt;/span&gt;he Xtext project offers an integration with the Code Mining API. The API is provided by the new plugin &lt;/span&gt;&lt;code&gt;org.eclipse.xtext.ui.codemining&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Xtext’s Domain-Model example has been extended to make use of this API and serves as a blue print for other languages.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First of all, the language’s generator workflow is extended to use the &lt;/span&gt;&lt;code&gt;CodeMiningFragment&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;import org.eclipse.xtext.xtext.generator.ui.codemining.CodeMiningFragment
...
Workflow {
  ...
  language = StandardLanguage {
    ...
    &lt;strong&gt;fragment = CodeMiningFragment {&lt;/strong&gt;
      generateStub = true
      generateXtendStub = false
    }
  }
}&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When the generator is executed it will create a &lt;/span&gt;&lt;code&gt;&amp;lt;DSL&amp;gt;CodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; stub class in the UI project and register it to the &lt;/span&gt;&lt;span style=&quot;font-weight: 400; font-family: 'andale mono', times;&quot;&gt;plugin.xml&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The provider extends from &lt;/span&gt;&lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;&lt;code&gt;AbstractXtextCodeMiningProvider&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which implements the general contract of an &lt;/span&gt;&lt;code&gt;ICodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Code Mining feature distinguishes between minings that are shown above a mined text line (line header minings) and minings shown within a line (line content minings – like the Java example above). &lt;/span&gt;&lt;code&gt;AbstractXtextCodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; offers some convenience methods &lt;/span&gt;&lt;code&gt;createNewLineHeaderCodeMining()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;code&gt;createNewLineContentCodeMining()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to create appropriate instances of &lt;/span&gt;&lt;code&gt;ICodeMining&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The developer’s task is to implement the &lt;/span&gt;&lt;code&gt;createCodeMinings()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; method:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;Code-Mining-Method&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-Method.png?t=1527084189178&amp;amp;width=1010&amp;amp;name=Code-Mining-Method.png&quot; style=&quot;width: 1010px;&quot; width=&quot;1010&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;In this method basically the resource is analysed to identify text to be displayed for some elements. Then the location for that text in the document has to be computed. U&lt;span&gt;sually t&lt;/span&gt;his affects accessing the document or the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;node model&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; using &lt;/span&gt;&lt;code&gt;NodeModelUtils&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Domain-Model Example&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; return types of operations are optional. When not declared, the return type is inferred. Therefore code minings could be created that display the inferred return type when not specified.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Domain-Model-Example-Code-Mining&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Domain-Model-Example-Code-Mining.png?t=1527084189178&amp;amp;width=724&amp;amp;name=Domain-Model-Example-Code-Mining.png&quot; style=&quot;width: 724px;&quot; width=&quot;724&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The example’s &lt;/span&gt;&lt;code&gt;DomainmodelCodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; class implements the &lt;/span&gt;&lt;code&gt;createCodeMinings()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; method as follows: First, all &lt;/span&gt;&lt;code&gt;Operation&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instances in the resource are collected. For each instance that doesn't have an explicit type set, the inferred return type’s name is computed. The type should be displayed after the closing parenthesis. The parenthesis’ Keyword is looked up in the grammar and stored in &lt;/span&gt;&lt;code&gt;rightParenthesisKeyword_4&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. From the node model the node representing the parenthesis is searched to find the document offset where the text is to be displayed. Finally, the &lt;/span&gt;&lt;code&gt;acceptor&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is called with a line content mining created from offset position and the inferred type name.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Code-Mining-Override&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-Override.png?t=1527084189178&amp;amp;width=1999&amp;amp;name=Code-Mining-Override.png&quot; style=&quot;width: 1999px;&quot; width=&quot;1999&quot; /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A look behind the scenes&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is an extension to JFace’s &lt;/span&gt;&lt;code&gt;SourceViewer&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The new interface &lt;/span&gt;&lt;code&gt;ISourceViewerExtension5&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; defines the contract for code mining support in source viewers.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext uses this extension in the &lt;/span&gt;&lt;code&gt;XtextCodeMiningReconcileStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and calls the extension methods (mainly &lt;/span&gt;&lt;code&gt;updateCodeMinings()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) when the text in the editor is reconciled. Xtext’s main &lt;/span&gt;&lt;code&gt;IReconcilingStratetgy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; implementation &lt;/span&gt;&lt;code&gt;XtextDocumentReconcileStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; was already aggregating two custom reconciling strategies, but not well prepared to add a third. It was refactored to aggregrate multiple now.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The &lt;/span&gt;&lt;code&gt;XtextCodeMiningReconcileStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; will only be added when code mining support is provided by a DSL. Thus there will be no overhead for any existing DSL until they implement code mining. Users will currently experience a small delay on the text update, since minings are computed and displayed asynchronously.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A note on backward compatility&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Xtext framework is backward compatible to older versions of the Eclipse Platform. With Xtext 2.14, the project still targets Eclipse Luna (4.4) as lowest supported platform to run on and is built and tested against it.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Since Code Mining is a new feature that's only provided on Eclipse Photon (4.8) and later, this raised some challenges on compatibility:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext must be buildable with Eclipse Luna as Target Platform&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;DSLs developed on a 4.8+ Platform with Code Mining must be deployable on Eclipse Oxygen and earlier&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The DSL’s editor must run on Eclipse Oxygen and earlier without breakage, just the minings are not displayed&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We'll highlight these challenges and how they were solved in Xtext in a later blog post.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is a new feature in Eclipse text editors that can provide valuable context information to developers within displayed text. Xtext 2.14 adopts the Code Mining API and offers an own API suited for Xtext DSL implementations. A usage reference is contained in the Domain-Model example. DSLs providing a Code Mining implementation are safely installable on older Eclipse versions.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Kudos to &lt;a href=&quot;https://twitter.com/angelozerr?lang=de&quot;&gt;Angelo Zerr&lt;/a&gt;, who has contributed the API to Eclipse Photon and was always helpful to solve issues that we faced with the API and its implementation. On itemis side, a huge part of the effort was done by student René Purrio, who carefully analyzed the implementation and did intensive testing. With tight cooperation with our Xtext core team he was able to shape a nice implementation and contribute a valuable feature to Xtext.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fcode-mining-support-in-xtext&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 18 May 2018 13:10:00 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>itemis: How to Integrate Arduino with Eclipse Mita</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/how-to-integrate-arduino-with-eclipse-mita</guid>
	<link>https://blogs.itemis.com/en/how-to-integrate-arduino-with-eclipse-mita</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Developing embedded devices, especially for IoT applications, can be a very complex task and requires a lot of knowledge. In the last &lt;/span&gt;&lt;a href=&quot;https://blogs.itemis.com/en/eclipse-mita-bringing-software-development-for-the-iot-to-a-higher-level&quot;&gt;&lt;span&gt;blog post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; of my colleague Thomas Kutz we introduced &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/iot.mita&quot;&gt;&lt;span&gt;Eclipse Mita&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, a new programming language designed for developing embedded IoT devices. It comes with a concise syntax based on event-driven paradigms and abstracts from the underlying hardware. &lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Its two level architecture (application logic vs. platform specifics) allows to write easy-to-read application code without diving into hardware specifics. However, Eclipse Mita currently only supports the XDK platform as it was originally developed in the scope of Bosch’s XDK device.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In my master thesis I investigated how additional platforms can be integrated with Eclipse Mita and furthermore I implemented a prototype based on the popular Arduino Uno platform.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The prototype comes with support for time-depending events, buttons and LEDs. Additional features can be added later on, however, in this blog I want to show what’s possible with this extension.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Create Arduino platform definition&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Mita comes with a two level architecture, thus separating application logic from hardware specifics as much as possible. In order to integrate a new platform, one needs to contribute a platform definition as well as a bunch of platform specific code generators, the greenish parts of the picture below.&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt;
&lt;img alt=&quot;Eclipse-Mita-Arduino-Plattform-Definition-1&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/Eclipse-Mita-Arduino-Plattform-Definition-1.png?t=1527084189178&amp;amp;width=712&amp;amp;name=Eclipse-Mita-Arduino-Plattform-Definition-1.png&quot; style=&quot;width: 712px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;712&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The platform definition specifies which sensors and connectivity channels are available. In general, it is divided into three parts:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Sensor type definitions&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Connectivity type definitions&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Platform - collection of concrete sensors and connectivities&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There are several options to specify the platform. This is a simple example to demonstrate how it could be done:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package platforms.arduino;

sensor Button {
    generator &quot;com.yakindu.mita.platform.arduino.sensors.ButtonGenerator&quot;
    modality is_pressed : bool
    event pressed
    event released
}

connectivity named-singleton LED {
    generator &quot;com.yakindu.mita.platform.arduino.connectivity.LedGenerator&quot;    
    signal light_up(color : LedColor) : bool
}

enum LedColor {
    Red,
    Yellow,
    Orange
}

alias button_one for Button
alias button_two for Button

platform Arduino {
    has button_one
    has button_two
    has LED
}&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let’s go through it step by step. First, every platform needs to be specified within a package. This can be later imported in any user created Mita application.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package platforms.arduino;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After this we can specify the sensor and connectivity types. In this case it is the button as a sensor. A sensor type defines several so-called modalities as well as events. Modalities define the data or state of a sensor; here &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;is_pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; represents the pressed status of our button. However, instead of polling this status in our application code, we want to be informed on a status change via events. For this, we define two different events, the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;released&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; event, which can later on be used within the user programmed application code to define corresponding reactions. Lastly, we need to specify a code generator that implements the hardware specific parts.&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;sensor Button {
    generator &quot;com.yakindu.mita.platform.arduino.sensors.ButtonGenerator&quot;
    modality is_pressed : bool
    event pressed
    event released
}&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To use LEDs, we define a connectivity called &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LED&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It contains a signal with which the LED can be controlled. Supported colors are declared as an enumeration here.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;connectivity named-singleton LED {
    generator &quot;com.yakindu.mita.platform.arduino.connectivity.LedGenerator&quot;    
    signal light_up(color : LedColor) : bool
}

enum LedColor {
    Red,
    Yellow,
    Orange
}
&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As our platform contains two different buttons, we need to instantiate them like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;alias button_one for Button
alias button_two for Button
&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With this definition there are two buttons. Both of them can be used and have their own modalities and events (just like classes and objects, basically).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last but not least, the platform itself must be declared. The platform defines which components are used, via the keyword &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;has&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;platform Arduino {
    has button_one
    has button_two
    has LED
}
&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With this specification the Arduino platform contains of two buttons, defined as a sensor and the LED defined as a connectivity. The buttons got two events, &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;released&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and a modality &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;is_pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. They can be used within the application code. The LED can be controlled by changing the light_up signal.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Use Arduino platform definition in your own application&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once you have defined the platform, you can use it in your application code by importing the corresponding package. All components which are specified in the imported platform package can be used in your application code. This is demonstrated in the picture below:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Eclipse-Mita-Arduino-Plattform-Definition-2&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/Eclipse-Mita-Arduino-Plattform-Definition-2.png?t=1527084189178&amp;amp;width=1306&amp;amp;name=Eclipse-Mita-Arduino-Plattform-Definition-2.png&quot; style=&quot;width: 1306px;&quot; width=&quot;1306&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The button &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;button_one&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that we have specified in the platform can be referred to in the application code, especially to its modalities and events, like the event &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; here.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After finishing your application, C code generators are used to generate C code, ready to be compiled and then written into Arduino’s flash memory. The code generators are split into two parts. The application generators are already predefined and don’t need to be adjusted anymore. The platform generators are implemented based on the used target platform, here Arduino. This is actually the heavy lifting part when contributing an own platform. However, since Eclipse Mita is open source you can have a look in already implemented platform code generators and start from there.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The following example demonstrates what a simple application could look like, for controlling a red LED with two buttons:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package main;
import platforms.arduino;

setup led : LED {
    var red = light_up(color = Red);
}

every button_one.pressed {
    led.red.write(true);
}

every button_two.pressed {
    led.red.write(false);
}
&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This simple example might not be technically sophisticated, but as the supported components expand, the complexity of the application grows. By adding connectivities and sensors like bluetooth, wifi, accelerometers, gyroscopes, writing custom C code becomes time and cost expensive. With generalized and common C code generators a reliable development can be achieved and your development process is extremely accelerated.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Do you think a certain platform should be supported by Eclipse Mita? Feel free to leave a comment or send a mail and let us know!&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a class=&quot;cta_button&quot; href=&quot;https://info.itemis.com/cs/ci/?pg=a611d66e-11f7-48c4-92a9-d8f7650078e5&amp;amp;pid=761475&amp;amp;ecid=&amp;amp;hseid=&amp;amp;hsic=&quot;&gt;&lt;img alt=&quot;Don't miss any new article!  Subscribe to our blog&quot; class=&quot;hs-cta-img &quot; src=&quot;https://no-cache.hubspot.com/cta/default/761475/a611d66e-11f7-48c4-92a9-d8f7650078e5.png&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fhow-to-integrate-arduino-with-eclipse-mita&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 17 May 2018 13:46:39 +0000</pubDate>
	<author>robin.herrmann@itemis.de (Robin Herrmann)</author>
</item>
<item>
	<title>Jens Reimann: Eclipse Kura on the Intel UP² with CentOS</title>
	<guid isPermaLink="false">https://dentrassi.de/?p=3874</guid>
	<link>https://dentrassi.de/2018/05/16/intel-up%c2%b2-eclipse-kura/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;Intel UP²&quot; class=&quot;alignright size-medium wp-image-3883&quot; height=&quot;300&quot; src=&quot;https://dentrassi.de/wp-content/uploads/20180515_171043-292x300.jpg&quot; width=&quot;292&quot; /&gt; In the past I was testing modifications to Kura with a Raspberry Pi 3 and Fedora for ARM. But I got a nice little Intel UP² just recently, and so I decided to perform my next Kura tests, with the modifications to the Apache Camel runtime in Kura, on this nice board. Creating a new device profile for Kura using CentOS 7 and the Intel UP² looked like a good idea anyway.&lt;/p&gt;
&lt;p&gt;At the time of writing, the PR for merging the device profile into Kura is still pending (&lt;a href=&quot;https://github.com/eclipse/kura/pull/2093&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;PR #2093&lt;/a&gt;). But my hope is that this will be merged before Kura 4 comes out.&lt;/p&gt;
&lt;h2&gt;Build your own Kura image&lt;/h2&gt;
&lt;p&gt;But it is possible to try this out right now by using the preview branch (&lt;a href=&quot;https://github.com/ctron/kura/tree/preview/intel_up2_1&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;preview/intel_up2_1&lt;/a&gt;) on my forked repository: &lt;a href=&quot;https://github.com/ctron/kura&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ctron/kura&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following commands use the &lt;code&gt;kura-build&lt;/code&gt; container. For more information about building Kura with this container see: &lt;a href=&quot;https://github.com/ctron/kura-build&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/ctron/kura-build&lt;/a&gt; and &lt;a href=&quot;https://hub.docker.com/r/ctron/kura-build/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://hub.docker.com/r/ctron/kura-build/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So for the moment you will need to build this image yourself. But if you have Docker installed, then it only needs a few minutes to create your own build of Kura:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;docker run -v /path/to/output:/output -ti ctron/kura-build -r ctron/kura -b preview/intel_up2_1 -- -Pintel-up2-centos-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;/path/to/output&lt;/code&gt; must be replaced with a local directory where the resulting output should be placed. If you are running Docker with SElinux enabled, then you might need to append &lt;code&gt;:z&lt;/code&gt; to the volume:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;docker run -v /path/to/output:/output:z -ti ctron/kura-build -r ctron/kura -b preview/intel_up2_1 -- -Pintel-up2-centos-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you might guess, it is also possible to build other branches and repositories of Kura in the same way. That docker image only ensures that all the necessary build dependencies are present when executing the build.&lt;/p&gt;
&lt;p&gt;If you are running on Linux and do have all the dependencies installed locally. Then of course there is no need to run through Docker, you can simply call the &lt;code&gt;build-kura&lt;/code&gt; script directly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;./build-kura preview/intel_up2_1 -r ctron/kura -b preview/intel_up2_1 -- -Pintel-up2-centos-7
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Setting up CentOS 7&lt;/h2&gt;
&lt;p&gt;This is rather simple step, you simply need to download CentOS from &lt;a href=&quot;https://www.centos.org/download/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.centos.org/download/&lt;/a&gt; (the Minimal ISO is just fine). Copy the ISO to a USB stick (&lt;a href=&quot;https://wiki.centos.org/HowTos/InstallFromUSBkey&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://wiki.centos.org/HowTos/InstallFromUSBkey&lt;/a&gt;). On a Linux-ish system this should work like (where &lt;code&gt;/dev/sdX&lt;/code&gt; is the USB stick, all data on this stick will be lost!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo dd if=CentOS-7-x86_64-Minimal-1804.iso of=/dev/sdX bs=8M status=progress oflag=direct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebooting your UP with the USB stick attached, this should reboot into the CentOS installer from where you can perform a standard installation.&lt;/p&gt;
&lt;p&gt;After the installation is finished and you booted into CentOS, you will need to enable &lt;a href=&quot;https://fedoraproject.org/wiki/EPEL&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EPEL&lt;/a&gt;, as Kura requires some extra components (like &lt;code&gt;wireless-tools&lt;/code&gt; and &lt;code&gt;hostapd&lt;/code&gt;). You can do this by executing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo yum install epel-release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might also want to install a more recent kernel into CentOS. All the core things works with the default CentOS kernel. However some things like support for the GPIO support is still missing in the default CentOS kernel. But the mainline kernel from &lt;a href=&quot;http://www.elrepo.org&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ELRepo&lt;/a&gt; can easily be installed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
yum --enablerepo=elrepo-kernel install kernel-ml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information check e.g.: &lt;a href=&quot;https://www.howtoforge.com/tutorial/how-to-upgrade-kernel-in-centos-7-server/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.howtoforge.com/tutorial/how-to-upgrade-kernel-in-centos-7-server/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing Kura on the Intel UP²&lt;/h2&gt;
&lt;p&gt;Copy the RPM you just created from the build process over to the UP, e.g. by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;scp kura-build-output/2018XXXX-YYYY/kura-intel-up2-centos-7*.rpm user@my-up:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then on the device run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install kura-*.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install the Kura package as well as any required dependencies. After the installation has completed, reboot the machine and navigate your web browser to “http://my-up”, using the credentials “admin” / “admin”.&lt;/p&gt;
&lt;h2&gt;More information&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://eclipse.org/kura&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Kura&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/ctron/kura-build&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kura Build container&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.up-board.org/upsquared&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Intel UP²&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/eclipse/kura/pull/2093&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Add Intel UP2 support with CentOS 7 #2093&quot;&gt;PR #2093&lt;/a&gt;&lt;/strong&gt; – Add Intel UP2 support with CentOS 7
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The post &lt;a href=&quot;https://dentrassi.de/2018/05/16/intel-up%c2%b2-eclipse-kura/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Kura on the Intel UP² with CentOS&lt;/a&gt; appeared first on &lt;a href=&quot;https://dentrassi.de&quot; rel=&quot;nofollow&quot;&gt;ctron's blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 16 May 2018 11:01:27 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: Developer Advocate Wars / Arms Race</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4224</guid>
	<link>http://aniszczyk.org/2018/05/15/developer-advocate-wars-arms-race/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While I’m not a huge fan of an &lt;/span&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Arms_race&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;arms race&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (or trade wars) especially given the current political situation in the world these days, I am a HUGE FAN of the mantra of “&lt;/span&gt;&lt;a href=&quot;https://thenewkingmakers.com/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;developers are the new kingmakers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;” coined by the fine folks at Redmonk. For those of you who haven’t noticed, there’s been a developer advocate hiring arms race by the major hyperscale cloud providers. I’ve previously written how CNCF is &lt;/span&gt;&lt;a href=&quot;http://aniszczyk.org/2017/09/19/top-6-public-cloud-providers-in-cncf/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;unique amongst open source foundations by having involvement from all the major cloud providers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; so I have an interesting vantage point in seeing a trend amongst them in ramping up developer advocacy hiring over the last couple of years. Furthermore, this hiring blitz is even more evident for me given the last couple of weeks have been conference crazy in the cloud native space with CloudNativeCon/KubeCon, MSBuild, Google IO and Red Hat Summit happening. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So what is happening with developer advocacy and the hyperscale cloud providers?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Note: If you aren’t familiar with the term developer advocate, I highly recommend this presentation by &lt;/span&gt;&lt;/i&gt;&lt;a href=&quot;https://www.slideshare.net/chanezon/introduction-to-google-developer-relations&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Patrick Chanzenon&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and blog from &lt;/span&gt;&lt;/i&gt;&lt;a href=&quot;https://medium.com/@ashleymcnamara/what-is-developer-advocacy-3a92442b627c&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ashley McNamara&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; as an introduction to the profession.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Google&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Google historically has been one of the early proponents of developer advocacy/relations and has invested in it since 2006 (see this excellent &lt;/span&gt;&lt;a href=&quot;https://www.slideshare.net/chanezon/introduction-to-google-developer-relations/13-History_2006_DevRel_was_founded&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;presentation&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for a historical perspective). A cursory search on LinkedIn shows a few hundred developer advocates employed at Google covering a variety of technologies from browsers to cloud. They also recently hired some heavy hitters like Sam Ramji and even Adam Seligman of Salesforce fame to help further build out their developer relations organization which was a smart move:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Excited to join Google and the &lt;a href=&quot;https://twitter.com/googledevs?ref_src=twsrc%5Etfw&quot;&gt;@googledevs&lt;/a&gt; mission to help every developer grow their skills and career! Amazing team here representing devs around the world. Here we go!&lt;/p&gt;
&lt;p&gt;— Adam Seligman (@adamse) &lt;a href=&quot;https://twitter.com/adamse/status/953723851606695936?ref_src=twsrc%5Etfw&quot;&gt;January 17, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Anyways, I consider Google a leader in developer relations and with folks like Kelsey Hightower on staff, they are ahead of the curve.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Maximize your career growth by basing everything you do on helping people succeed or gain understanding, even if that person is you.&lt;/p&gt;
&lt;p&gt;— Kelsey Hightower (@kelseyhightower) &lt;a href=&quot;https://twitter.com/kelseyhightower/status/705767387555999744?ref_src=twsrc%5Etfw&quot;&gt;March 4, 2016&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I expect them to continue hiring like crazy to onboard more people onto their cloud offerings given their position in the market.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Microsoft&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I used to work with &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jeffsand&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Jeff Sandquist&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; at Twitter and was delighted to hear he went back to Microsoft to build a developer advocacy focused organization. MS isn’t new at this game as some of us who are old enough and did MFC programming back in the day may remember Microsoft and their &lt;/span&gt;&lt;a href=&quot;https://channel9.msdn.com/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Channel9&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; advocacy program. Microsoft has been investing heavily in developer relations by making key hires (e.g., Ashley McNamara, Bridget Kromhout) and have &lt;/span&gt;&lt;a href=&quot;https://www.linuxfoundation.org/blog/open-source-program-microsoft-open-source-thrives/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;rebooted their investment in open source&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to become one of the &lt;/span&gt;&lt;a href=&quot;https://www.digitaltrends.com/computing/microsoft-build-2018-ethical-empire/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;largest open source contributors in the industry&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. I’m not the first person to notice this trend by far, &lt;/span&gt;&lt;a href=&quot;http://redmonk.com/jgovernor/2017/09/06/on-hiring-jessie-frazelle-microsofts-developer-advocacy-hot-streak-continues/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;my friends at RedMonk noticed last year also&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Searching the &lt;/span&gt;&lt;a href=&quot;https://careers.microsoft.com/us/en/search-results?keywords=developer%20advocate&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Microsoft job site&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, I see them hiring a handful of developer advocates mostly focused on cloud but they already have a large established roster of folks. It’s hard to get an exact count through the inexact science of flipping through LinkedIn search results, but I’d peg it 50-100 people currently employed doing developer relations.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Amazon (AWS)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In late 2016, Amazon started to expand their open source credibility by hiring folks like &lt;/span&gt;&lt;a href=&quot;http://fortune.com/2016/12/01/amazon-open-source-guru/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Adrian Cockroft, Zaheda Borat and Arun Gupta&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Started at AWS as Head of Open Source Strategy. Excited to be working with &lt;a href=&quot;https://twitter.com/adrianco?ref_src=twsrc%5Etfw&quot;&gt;@adrianco&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— zahedab (@zahedab) &lt;a href=&quot;https://twitter.com/zahedab/status/804400402313510912?ref_src=twsrc%5Etfw&quot;&gt;December 1, 2016&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Using ancedata from my own experience being at events the last few years, Amazon has been aggressively speaking at conferences popular in the open source community. They have started to open source more examples and work with the community to improve them (e.g., &lt;/span&gt;&lt;a href=&quot;https://github.com/aws-samples/aws-workshop-for-kubernetes&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://github.com/aws-samples/aws-workshop-for-kubernetes&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It’s hard to get an exact number of people employed doing developer relations at AWS but going through the inexact science of LinkedIn search results, it looks to be in the 25-50 range which seems lower than I expected, but it’s hard as developer advocate is a fluid title (some people call themselves evangelists). In terms of hiring, &lt;/span&gt;&lt;a href=&quot;https://www.amazon.jobs/en/search?offset=10&amp;amp;result_limit=10&amp;amp;sort=relevant&amp;amp;distanceType=Mi&amp;amp;radius=24km&amp;amp;latitude=&amp;amp;longitude=&amp;amp;loc_group_id=&amp;amp;loc_query=&amp;amp;base_query=developer%20advocate&amp;amp;city=&amp;amp;country=&amp;amp;region=&amp;amp;county=&amp;amp;query_options=&amp;amp;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;searching the AWS jobs site&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; I came across a couple of handful of developer advocate focused jobs so they seem to be aggressively hiring in this space. Also on a related note, I’m forever a fan of AWS for their execution and &lt;/span&gt;&lt;a href=&quot;https://www.techrepublic.com/article/how-amazon-hopes-to-win-the-cloud-by-hiring-older-engineers/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;open discussion about hiring older engineers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;IBM&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IBM traditionally has a strong position with their interactions with the open source community and even built a formal &lt;a href=&quot;https://github.com/todogroup/guides&quot;&gt;open source program&lt;/a&gt; within the company (I was also a fan of their DeveloperWorks initiative and even wrote technical articles for them in the past). They have also showed how making early bets on open source initiatives like Linux and Eclipse can reshape markets. In terms of developer advocacy, it seems about a year ago hired &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jonasjacobi?lang=en&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Jonas Jacobi&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to focus on developer relations from what I’ve been able to ascertain. They recently hosted an open source developer event in San Francisco called &lt;/span&gt;&lt;a href=&quot;https://developer.ibm.com/indexconf/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IBM Index&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; which signals a desire to build developer communities outside the traditional IBM enterprise events like Think.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Best speaker gift ever! &lt;a href=&quot;https://twitter.com/indexconf?ref_src=twsrc%5Etfw&quot;&gt;@indexconf&lt;/a&gt; made me a poster with tweets from some of the people I’ve helped over the years. &lt;a href=&quot;https://t.co/oURuBSXsR7&quot;&gt;pic.twitter.com/oURuBSXsR7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Kelsey Hightower (@kelseyhightower) &lt;a href=&quot;https://twitter.com/kelseyhightower/status/966746697761046528?ref_src=twsrc%5Etfw&quot;&gt;February 22, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;From a cursory LinkedIn search, IBM has 100+ developer advocates working on things from AI to Cloud. In terms of hiring, I’ve only found a handful of job descriptions currently open that are focused on developer advocacy. However, there were many job descriptions that were labeled software engineering that seemed to heavily focus on developer advocacy, for example, the folks that work on something called the &lt;/span&gt;&lt;a href=&quot;https://www.ibm.com/cloud/garage/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IBM Cloud Garage&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; seem to be a developer relations style job.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Oracle&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Oracle has a &lt;/span&gt;&lt;a href=&quot;https://www.prnewswire.com/news-releases/leading-analyst-firm-oracle-continues-strong-cloud-growth-300648114.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;burgeoning cloud business&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and according to some &lt;/span&gt;&lt;a href=&quot;https://www.techrepublic.com/article/oracles-lack-of-developer-appeal-is-killing-its-cloud-business/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;news sources&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, Oracle is actively trying to hire a new executive to run developer relations. A cursory job search shows that Oracle is ramping up their hiring, I see &lt;/span&gt;&lt;a href=&quot;https://www.google.com/search?q=oracle+jobs+developer+advcoate&amp;amp;ibp=htl;jobs#fpstate=tldetail&amp;amp;htidocid=jG-m3WgfBzINpaviAAAAAA%3D%3D&amp;amp;htivrt=jobs&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;dozens of developer advocate positions&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; open along with some more senior director level positions. I continue to expect Oracle to invest heavily in developer relations as this is an area they aren’t known for but has become table stakes in the public cloud business in my opinion.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Alibaba (and BAT+)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Alibaba and their &lt;/span&gt;&lt;a href=&quot;https://techcrunch.com/2018/02/06/alibaba-cloud-growing-like-gangbusters-but-still-far-behind-aws-and-other-market-leaders/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;cloud business is growing fast&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; worldwide even though we don’t hear much about them in North America. In my opinion, they are making smart moves in Southeast Asia, India and other markets but that’s for another article to discuss. In my quest to learn about developer advocacy at Alibaba and even the other BAT companies, it was hard pressed to find any folks individually working on this. It’s clear to me that Alibaba has developer relations folks as if you go to their &lt;/span&gt;&lt;a href=&quot;https://www.alibabacloud.com/developers&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Alibaba Developers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; site there is some great content there but it’s been difficult to find current folks employed in devrel there and what they are hiring for. I’ll chalk this up to my inability to understand how job searching works in China and maybe one of my readers can shed some light on this. My hunch is that Alibaba will aggressively start hiring developer relations people worldwide if they didn’t start already, it will be fun to watch.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So what did I learn while I wrote this article? Well first off, getting hard numbers of how many job openings out there is a terrible science, sites like LinkedIn, Glassdoor and Indeed make it very difficult to extract data from their platforms to analyze. Second, &lt;/span&gt;&lt;b&gt;developer relations&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a nascent field and there’s no standard job description or career ladder. In many companies you have titles that range from “developer advocate” to “developer evangelist” to even “software engineer” that have primary responsibilities as developer relations. There have even been boutique communities popup to support people in the role of developer relations, see the &lt;/span&gt;&lt;a href=&quot;https://evangelistcollective.github.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Evangelist Collective&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; slack as an example. Also the hiring of developer advocates isn’t just for large cloud providers or companies… you see some of the smart modern startups like Hashicorp, &lt;/span&gt;&lt;a href=&quot;https://www.turbinelabs.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Turbine Labs&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and others hiring folks exclusively to make it easier to onboard developers to their tooling.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, my prediction is that we will see cutthroat competition amongst the hyperscale cloud providers in hiring developer relations talent, especially out of the incumbents. The rest of the industry will learn from this experience that having a strong developer relations team is table stakes for any developer focused business. I’d love to write more on this topic but I’m short on time and I’m sure my friends at Redmonk can do a better job on this topic than me &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 15 May 2018 14:59:49 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.6.0.AM1 for Eclipse Photon.0.M6</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.6.0.am1-for-photon.0.m6.html</guid>
	<link>https://tools.jboss.org/blog/4.6.0.am1-for-photon.0.m6.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.6.0.AM1 (Developer Milestone 1) build for Eclipse Photon.0.M6.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/photon/4.6.0.AM1.html&quot;&gt;JBoss Tools 4.6.0 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eclipse-photon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eclipse-photon&quot;&gt;&lt;/a&gt;Eclipse Photon&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools is now targeting Eclipse Photon M6.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-9-0-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-9-0-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.9.0.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.9.0.Final. Read the official announcement &lt;a href=&quot;https://forge.jboss.org/news/jboss-forge-3.9.0.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 15 May 2018 07:55:18 +0000</pubDate>
</item>
<item>
	<title>Jeremie Bresson: Starting a new open-source project</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2018/2018-05-15_new-open-source-project.html</guid>
	<link>http://jmini.github.io/blog/2018/2018-05-15_new-open-source-project.html</link>
	<description>&lt;div id=&quot;preamble&quot;&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Working on open-source is a skill…​&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Three month ago I started to use and to contribute &lt;code&gt;swagger-codegen&lt;/code&gt;. It feelt natural to fix and to add the stuff I needed there.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Then I received an invitation from a group of people that had started a fork of the project. Without going into the details, I think that each member had its own reasons to work on this fork. We wrote a summary in the &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/blob/master/docs/qna.md&quot;&gt;project Q&amp;amp;A&lt;/a&gt;.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;imageblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;img alt=&quot;Enable project specific settings&quot; src=&quot;http://jmini.github.io/blog/2018/2018-05-15_logo_proposition.png&quot; /&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;title&quot;&gt;
    Image 1. OpenAPI Generator logo 
    &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/issues/23&quot;&gt;proposition&lt;/a&gt; by 
    &lt;a href=&quot;https://twitter.com/jimschubert&quot;&gt;@jimschubert&lt;/a&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The last days were really exiting, we have started the &lt;code&gt;openapi-generator&lt;/code&gt; project officially. We have now a GitHub repository: &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;OpenAPITools/openapi-generator&lt;/a&gt; The first feedback arrives. We have pushed our first &lt;a href=&quot;https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/&quot;&gt;SNAPSHOT artifacts&lt;/a&gt; on sonatype central repository. We are close to our first release…​&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;running_an_open_source_project&quot;&gt;Running an open-source project&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;I realised during this experiment that participating in an open-source project and running it is really a skill. Some people have it, they are directly alined, they understand what they need to do. Other do not understand how it works.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;I have learned it from talented people. All developers involved with projects hosted at the Eclipse Foundation and contributors of the Asciidoctor project have shown me the way. They were excellent teachers.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;what_is_next_for_openapi_generator&quot;&gt;What is next for OpenAPI Generator?&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;Starting an open source project is not only about code. Communication and marketing are also important. I hope we will manage build a community of user around our project. This is the best way to find potential contributors.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;about_openapi_generator&quot;&gt;About OpenAPI Generator:&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;If you wonder what the project is about, here my short definition:&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;An &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/&quot;&gt;OpenAPI Specification (OAS)&lt;/a&gt; is a great way to describe API in a standardised, machine readable and programming language-agnostic manner. &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;OpenAPI Generator&lt;/a&gt; is an engine to generate documentation, API clients and server stubs in different languages for a given OpenAPI Specification.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</description>
	<pubDate>Mon, 14 May 2018 22:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Proposed Charter for OS.bea Working Group</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/zHBPJiPwhAw/osbea_wg_charter.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/zHBPJiPwhAw/osbea_wg_charter.php</link>
	<description>New proposed charter for OS.bea Working Group is ready for review. Paticipate by adding feedback on the mailing-list.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/zHBPJiPwhAw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 14 May 2018 18:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon Europe 2018 Call for Papers</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/9IHAV0S8NRU/europe2018</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/9IHAV0S8NRU/europe2018</link>
	<description>Review the CFP, talk with your team and submit your talks today!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/9IHAV0S8NRU&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 14 May 2018 18:00:00 +0000</pubDate>
</item>
<item>
	<title>itemis: Eclipse Mita – Bringing software development for the IoT to a higher level</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/eclipse-mita-bringing-software-development-for-the-iot-to-a-higher-level</guid>
	<link>https://blogs.itemis.com/en/eclipse-mita-bringing-software-development-for-the-iot-to-a-higher-level</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Software development for embedded IoT systems is not an easy task. In most cases, you’ll have to write C or C++ code; both coming with a higher learning curve than modern programming languages like Go and Rust. And in most cases, you’ll have to write a fair amount of lines of code to make an LED blink, the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Hello World&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; application of embedded software development. &lt;br /&gt;However, especially when you come from an application development point of view, the real difficulty lies in dealing with the hardware you are developing for. Browsing data sheets and manuals to understand how things are connected on your platform, and how communication works between your platform and peripheral devices can be very time consuming and frustrating. Also, you have to keep an eye on memory and energy consumption as both are usually highly restricted in embedded devices. This often results in hardware specifics being interweaved in your actual application logic. Porting the same application onto another hardware then often requires to rewrite large parts of your code.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Mita-Logo&quot; height=&quot;234&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/Mita-Logo.png?t=1527084189178&amp;amp;width=510&amp;amp;height=234&amp;amp;name=Mita-Logo.png&quot; style=&quot;width: 510px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;510&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/iot.mita&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Mita&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a &lt;/span&gt;&lt;strong&gt;new programming language for the IoT&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that aims to mitigate the aforementioned difficulties. It comes with a more concise syntax based on event-driven paradigms and clearly separates between application logic and platform capabilities. Eclipse Mita was initially developed by Bosch Connected Devices and Solutions with the help of itemis. It was first implemented for the XDK Workbench, the IDE for &lt;/span&gt;&lt;a href=&quot;https://xdk.bosch-connectivity.com/de/overview&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Bosch’s XDK&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; device, where the language is currently called XDK Live. However, from the beginnings the goal was to create a language that is not bound to a specific hardware, but allows to integrate with multiple platforms. As the project is now open source and part of the vivid Eclipse ecosystem, more platforms, like Arduino or Raspberry Pi, are expected to be supported in the near future.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Mita-Code-Generator-angepasst&quot; height=&quot;408&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/Mita-Code-Generator-angepasst.jpg?t=1527084189178&amp;amp;width=909&amp;amp;height=408&amp;amp;name=Mita-Code-Generator-angepasst.jpg&quot; style=&quot;width: 909px;&quot; width=&quot;909&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Mita is built with the goal in mind to separate application logic from hardware specifics. Therefore, it comprises two layers of abstraction: an application logic layer where functionalities are defined in an event-driven reactive programming style, and a platform definition layer where the hardware capabilities, like sensors, actuators and connectivity channels, are described. Then, on application level, one selects a platform definition to enable all therein defined hardware capabilities and thus making them available in the language to define reactions on a certain event or to read-out specific sensor data.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The code written with Eclipse Mita directly transpiles into C code. This makes Eclipse Mita usable wherever C is the target language which is usually the case for embedded software. The framework comes with two sets of C code generators: &lt;/span&gt;&lt;strong&gt;application code generators&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;strong&gt;platform specific code generators&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Application code generators know how to transform Mita language constructs like event handlers, for-each loops, or exceptions into valid C code. On the other hand, the platform specific code generators know how to access your hardware’s sensor data or which register values to write to make your LED blink.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The obvious advantage of such a strict separation of concerns in the Mita framework is the possibility to integrate multiple platforms. For this, one needs to supply a platform definition file together with the platform specific code generators. The application language can be used out of the box and all its future advancements do not affect the hardware specific parts. This makes it possible to create an IDE for embedded software development that can be used across different platforms and hardware manufacturers.&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package main;

import platforms.xdk110;

setup led : LED {
    var red = light_up(color = Red);
}

every button_one.pressed {
    led.red.write(true);
}

every button_two.pressed {
    led.red.write(false);
}&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Here you can see a simple application written in Eclipse Mita. In contrast to the generated C code it is quite self-explanatory. Also note that the import statement is the only hint for which platform the application is written. &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In upcoming blog posts we will show &lt;a href=&quot;https://hosting.itemis.de/en/how-to-integrate-arduino-with-eclipse-mita&quot;&gt;how to port this example onto an Arduino Uno&lt;/a&gt;, and even how to use &lt;a href=&quot;https://www.itemis.com/en/yakindu/state-machine/&quot;&gt;YAKINDU Statechart Tools&lt;/a&gt; in combination with Eclipse Mita. So if you don’t want to miss that, subscribe to our blog!&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a class=&quot;cta_button&quot; href=&quot;https://info.itemis.com/cs/ci/?pg=a611d66e-11f7-48c4-92a9-d8f7650078e5&amp;amp;pid=761475&amp;amp;ecid=&amp;amp;hseid=&amp;amp;hsic=&quot;&gt;&lt;img align=&quot;middle&quot; alt=&quot;Don't miss any new article!  Subscribe to our blog&quot; class=&quot;hs-cta-img &quot; src=&quot;https://no-cache.hubspot.com/cta/default/761475/a611d66e-11f7-48c4-92a9-d8f7650078e5.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Feclipse-mita-bringing-software-development-for-the-iot-to-a-higher-level&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 11 May 2018 08:30:00 +0000</pubDate>
	<author>kutz@itemis.de (Thomas Kutz)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Common Build Infrastructure: Upcoming Changes</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/SfssbCaRWqo/watch</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/SfssbCaRWqo/watch</link>
	<description>Eclipse CBI is undergoing important changes, including Kubernetes/ Docker via Red Hat OpenShift &amp;amp; CloudBees Jenkins Enterprise.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/SfssbCaRWqo&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 10 May 2018 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Going Serverless</title>
	<guid isPermaLink="false">https://cdtdoug.ca/2018/05/10/going-serverless</guid>
	<link>https://cdtdoug.ca/2018/05/10/going-serverless.html</link>
	<description>&lt;h1 id=&quot;going-serverless&quot;&gt;Going Serverless&lt;/h1&gt;

&lt;p&gt;Well, after a couple of years running my cdtdoug.ca server on AWS and the couple of years before that on DigitalOcean, I finally got tired of managing my own server and have moved my blog over to Github Pages. I’m using the default Minima template to get me going, but reading through the Jekyll docs, it looks like I’ll have some fun tweaking my own setup the way I want it.&lt;/p&gt;

&lt;p&gt;For the first 8 years of my blogging life, I had hosted it on Google’s Blogger. But being the foolhearty geek craving to learn new things, I got my own little server in the cloud and moved my blog there, first on Wordpress and then recently moved to the much lighter weight Ghost. I learned a lot and it was pretty fun but I think I got what I wanted out of it and it’s time to move on to the next thing.&lt;/p&gt;

&lt;p&gt;The other reason for getting a server was to do some home IoT projects. I had visions of setting up my own MQTT broker there and a simple node.js web site to provide the UI. But the world has changed. I am now looking at serverless offerings that should allow me to do all this without having to manage a server and at a fraction of the cost of even the t2.nano. One device, a few thousand messages a month, a simple REST API and a tiny static web site. It’s almost free.&lt;/p&gt;

&lt;p&gt;So that’s my next adventure. First, I’m hoping I’ve set up the Planet Eclipse feed to pick up the generated RSS XML file properly. Then I’m off to play with some new toys.&lt;/p&gt;</description>
	<pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF Photon supports OSGi Async Intent</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5680104965640748238</guid>
	<link>http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgi-async-intent.html</link>
	<description>In a &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/04/ecf-photon-supports-osgi-r7.html&quot;&gt;previous post&lt;/a&gt;, I indicated that ECF Photon will support OSGi R7.   What does this mean for  remote service developers?&lt;br /&gt;&lt;br /&gt;Support &lt;b&gt;osgi.async&lt;/b&gt; Remote Service Intent&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services specification&lt;/a&gt; has been enhanced with new remote service &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#i1693415&quot;&gt;intents&lt;/a&gt;.  Remote Service Intents allow remote service authors to specify requirements on the underlying distribution system.   The &lt;b&gt;osgi.async&lt;/b&gt; intent allows the service interface to use return types like Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFuture&lt;/a&gt; or OSGi's &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/util.promise.html&quot;&gt;Promise&lt;/a&gt;.   When a distribution provider supports this intent, the remote service proxy will automatically implement the asynchronous/non-blocking behavior for the service consumer.&lt;br /&gt;&lt;br /&gt;For example, consider a service interface:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;public interface Hello {&lt;br /&gt;    CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage);&lt;br /&gt;}&lt;/pre&gt;When an implementation of this service is registered and exported as a remote service:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(property = { &quot;service.exported.interfaces=*&quot;, &quot;service.intents=osgi.async&quot; })&lt;br /&gt;public class HelloImpl implements Hello {&lt;br /&gt;    public CompletableFuture hello(String greetingMessage) {&lt;br /&gt;          CompletableFuture&amp;lt;String&amp;gt; future = new CompletableFuture&amp;lt;String&amp;gt;();&lt;br /&gt;          future.complete(&quot;Hi.  This a response to the greeting: &quot;+greetingMessage);&lt;br /&gt;          return future;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;Then when a Hello servicee consumer discovers, imports and the remote service is injected by DS:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(immediate=true)&lt;br /&gt;public class HelloConsumer {&lt;br /&gt;&lt;br /&gt;    @Reference&lt;br /&gt;    private Hello helloService;&lt;br /&gt;&lt;br /&gt;    @Activate&lt;br /&gt;    void activate() throws Exception {&lt;br /&gt;        // Call helloService.hello remote service without blocking&lt;br /&gt;        helloService.hello(&quot;hi there&quot;).whenComplete((result,exception) -&amp;gt; {&lt;br /&gt;            if (exception != null)&lt;br /&gt;                exception.printStackTrace(exception);&lt;br /&gt;            else&lt;br /&gt;                System.out.println(&quot;hello service responds: &quot; + result);&lt;br /&gt;        });&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;The injected &lt;b&gt;helloService &lt;/b&gt;instance will automatically implement the asynchronous/non-blocking remote call via the &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution provider&lt;/a&gt;.   No need for the consumer to implement anything other than calling the 'hello' method and handling the response via implementing &lt;b&gt;whenComplete&lt;/b&gt;.   The Java8 CompletionStage, Future, and OSGi's Promise are also supported return types.&lt;br /&gt;&lt;br /&gt;This makes it very easy to define, implement, and efficiently use loosely-coupled asynchronous remote services.   It also makes remote service contracts transport independent, allowing the swapping of &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt; or custom providers without changes to the service interface contract.</description>
	<pubDate>Wed, 09 May 2018 21:27:23 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>itemis: New File Wizard – einfach mit Xtext 2.14 generieren</title>
	<guid isPermaLink="true">https://blogs.itemis.com/de/new-file-wizard-einfach-mit-xtext-2.14-generieren</guid>
	<link>https://blogs.itemis.com/de/new-file-wizard-einfach-mit-xtext-2.14-generieren</link>
	<description>&lt;p&gt;&lt;span&gt;Dass Xtext 2.14 in der Lage ist, einen &lt;/span&gt;&lt;a href=&quot;https://blogs.itemis.com/de/new-project-wizard-einfach-mit-xtext-2-14-generieren&quot; style=&quot;background-color: #ffffff;&quot;&gt;&lt;span&gt;New Project Wizard zu generieren&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, wurde bereits im Blog berichtet. Aber auch ein vergleichbarer, ebenfalls auf Templates basierender Wizard, um DSL-Dateien in bestehenden Projekten zu erzeugen, ist nun neu dazu gekommen.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dieser Wizard wird mit &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/modeling.tmf.xtext&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Photon im Juni 2018&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; erscheinen – hier aber schon mal eine kurze Vorschau.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Erzeugen des New File Wizards&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Der Wizard für neue Dateien wird nahezu genauso erzeugt wie der Wizard für neue Projekte. In der mwe2-Datei, die definiert, was generiert wird, muss folgender Abschnitt eingefügt werden:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;language = StandardLanguage {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;strong&gt;fileWizard = {&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;        generate = true&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;    }&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Die Generierung mittels &lt;/span&gt;&lt;code&gt;Run As -&amp;gt; MWE2 Workflow&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; generiert nun den Wizard und ein beispielhaftes Template.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Im UI-Projekt der Sprache wird ein Package &lt;/span&gt;&lt;code&gt;wizard&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; generiert, das vor allem eine Datei &lt;/span&gt;&lt;code&gt;MyDslFileTemplateProvider.xtend&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; enthält (wobei der Name der Datei von dem Namen der Sprache abhängt). In dieser Datei wird der Inhalt des Wizards definiert. Weitere Konfigurationen sind normalerweise nicht nötig.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Wenn lediglich ein einzelnes Template für eine Sprache generiert wird, dann hat der Wizard nur eine Seite. Auf ihr werden neben dem Verzeichnis und einem Namen alle Parameter des Templates angegeben.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-214-new-file-wizard&quot; height=&quot;493&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-214-new-file-wizard.png?t=1527084189178&amp;amp;width=511&amp;amp;height=493&amp;amp;name=Xtext-214-new-file-wizard.png&quot; style=&quot;width: 511px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;511&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Gibt es mehrere Templates, wird auf der ersten Seite eine Combo-Box zur Auswahl des Templates angezeigt. Die Parameter werden dann auf der optionalen, zweiten Seite konfiguriert.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Definieren eigener Templates&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Um das “Hello World” an die eigene Sprache anzupassen oder weitere Templates hinzuzufügen, muss der &lt;/span&gt;&lt;code&gt;TemplateProvider &lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;– eine Klasse, die &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileTemplateProvider.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IFileTemplateProvider&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; implementiert – angepasst werden. Dieser liefert mit der Methode &lt;/span&gt;&lt;code&gt;getFileTemplates &lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;eine Liste mit allen verfügbaren Templates für die Sprache zurück. Standardmäßig sieht die Implementierung wie folgt aus:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Das Hinzufügen eines weiteren Templates ist also das Hinzufügen einer neuen Instanz zu dieser Liste – zum Beispiel:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Das neue Template muss eine Subklasse von &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/AbstractFileTemplate.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AbstractFileTemplate&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; sein. Am einfachsten lässt sich eine solche durch die Nutzung der Active Annotation &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/FileTemplate.xtend&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;FileTemplate&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; erzeugen. Diese Annotation bietet die Möglichkeit, den Namen, ein Icon sowie einen Beschreibungstext für das Template festzulegen. Diese regeln die Darstellung des Templates in der Liste der verfügbaren Templates im Wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Man würde also in etwa so beginnen:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;@FileTemplate(label=&quot;Test&quot;, icon=&quot;file_template.png&quot;,&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;This creates a new hello world file.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Hier ist zumindest die Methode &lt;/span&gt;&lt;code&gt;generateFile(IFileGenerator)&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; zu implementieren. Der übergebene &lt;/span&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileGenerator.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IFileGenerator&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; enthält dabei eine einzelne Methode &lt;/span&gt;&lt;code&gt;generate(CharSequence, CharSequence)&lt;span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;die man nun beliebig oft aufrufen kann, um beim Beenden des Wizards Dateien anzulegen.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ein Aufruf, um ein einfaches “Hello World” zu erzeugen, kann dann zum Beispiel so aussehen:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Zusätzliche Aufrufe von &lt;/span&gt;&lt;code&gt;generate &lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;erzeugt weitere Dateien. Die Parameter für die Templates werden mit derselben API definiert, wie die Project Templates. Das vollständige “Hello World” sieht dann so aus:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@FileTemplate(label=&quot;Hello World&quot;, icon=&quot;file_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;description=&quot;Create a hello world for MyDsl.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;val helloName = combo(&quot;Hello Name:&quot;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[&quot;Xtext&quot;, &quot;World&quot;, &quot;Foo&quot;, &quot;Bar&quot;], &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;The name to say 'Hello' to&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;br /&gt;Auch das Beisteuern weiterer Templates funktioniert analog zu den Projekt Templates über einen Extension Point. In diesem Fall über &quot;org.eclipse.xtext.ui.fileTemplate&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Da Eclipse Photon noch in etwa zwei Monaten Entfernung liegt, kommt hier schon einmal der Link zur nächtlichen Update Site:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fde%2Fnew-file-wizard-einfach-mit-xtext-2.14-generieren&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 07 May 2018 14:17:32 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>Donald Raab: EC by Example: Counting</title>
	<guid isPermaLink="false">https://medium.com/p/688dfaaf513c</guid>
	<link>https://medium.com/@donraab/ec-by-example-counting-688dfaaf513c?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to count the elements of a collection that match a Predicate using &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*n16KdxFkWicvN3BKn-Hatg.png&quot; /&gt;How many helicopters are there?&lt;/figure&gt;&lt;h3&gt;How do you count using Eclipse Collections?&lt;/h3&gt;&lt;p&gt;The method &lt;em&gt;count&lt;/em&gt; takes a &lt;em&gt;Predicate&lt;/em&gt; as a parameter and returns the number of the elements in a collection that match.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/561/1*YpDqfdVYmxNEK-ivgbwxZg.png&quot; /&gt;Counting with a Predicate&lt;/figure&gt;&lt;p&gt;There is also a &lt;em&gt;countWith&lt;/em&gt; method which takes a &lt;em&gt;Predicate2&lt;/em&gt; and a &lt;em&gt;countBy&lt;/em&gt; method which takes a &lt;em&gt;Function&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Counting elements of a Collection&lt;/h3&gt;&lt;p&gt;Here’s a simple enum we’ll use to identify different things in a Collection.&lt;/p&gt;&lt;pre&gt;public enum SkyEntity&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;(true), &lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;(false), &lt;strong&gt;&lt;em&gt;BIRD&lt;/em&gt;&lt;/strong&gt;(true);&lt;br /&gt;&lt;br /&gt;    SkyEntity(boolean flies)&lt;br /&gt;    {&lt;br /&gt;        this.flies = flies;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private boolean flies;&lt;br /&gt;&lt;br /&gt;    public boolean canFly()&lt;br /&gt;    {&lt;br /&gt;        return this.flies;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Now, let’s count some things. First, I will create a &lt;em&gt;MutableBag&lt;/em&gt; of &lt;em&gt;SkyEntity&lt;/em&gt; instances using &lt;em&gt;addOccurrences&lt;/em&gt; to set the counts directly. Then I will convert the &lt;em&gt;MutableBag&lt;/em&gt; to a &lt;em&gt;MutableList&lt;/em&gt;. Then I will use &lt;em&gt;count&lt;/em&gt; to count the number of HELICOPTER and &lt;em&gt;countWith&lt;/em&gt; to count the number of SKYSCRAPER.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void count()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;SkyEntity&amp;gt; bag = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;    bag.addOccurrences(SkyEntity.&lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;, 12);&lt;br /&gt;    bag.addOccurrences(SkyEntity.&lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;, 10);&lt;br /&gt;    bag.addOccurrences(SkyEntity.&lt;strong&gt;&lt;em&gt;BIRD&lt;/em&gt;&lt;/strong&gt;, 100);&lt;br /&gt;    MutableList&amp;lt;SkyEntity&amp;gt; list = bag.toList();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            bag.occurrencesOf(SkyEntity.&lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            list.count(SkyEntity.&lt;strong&gt;&lt;em&gt;HELICOPTER&lt;/em&gt;&lt;/strong&gt;::equals));&lt;br /&gt;    &lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            bag.occurrencesOf(SkyEntity.&lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            list.countWith(Object::equals, SkyEntity.&lt;strong&gt;&lt;em&gt;SKYSCRAPER&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;Boolean&amp;gt; flies = list.countBy(SkyEntity::canFly);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            flies.occurrencesOf(Boolean.&lt;strong&gt;&lt;em&gt;TRUE&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            list.count(SkyEntity::canFly));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Finally, I group and count the &lt;em&gt;SkyEntity&lt;/em&gt; who can and can’t fly using &lt;em&gt;countBy&lt;/em&gt; with a &lt;em&gt;Function&lt;/em&gt; which returns a &lt;em&gt;Boolean&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Counting Primitive Collections&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; has a full complement of primitive collections. Each primitive collections supports a count API. Here are a couple examples of counting with primitive collections.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void countPrimitive()&lt;br /&gt;{&lt;br /&gt;    IntList intList = IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, intList.count(IntPredicates.&lt;em&gt;isEven&lt;/em&gt;()));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, intList.count(IntPredicates.&lt;em&gt;isOdd&lt;/em&gt;()));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, intList.count(i -&amp;gt; i % 3 == 0));&lt;br /&gt;&lt;br /&gt;    CharAdapter chars =&lt;br /&gt;        Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;the quick brown fox jumps over the lazy dog&quot;&lt;/strong&gt;);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, chars.count(c -&amp;gt; c == &lt;strong&gt;'t'&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(8, chars.count(Character::&lt;em&gt;isWhitespace&lt;/em&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#count-org.eclipse.collections.api.block.predicate.Predicate-&quot;&gt;count&lt;/a&gt; / &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#countWith-org.eclipse.collections.api.block.predicate.Predicate2-P-&quot;&gt;countWith&lt;/a&gt; — counts the number of elements of a collection that match a given &lt;em&gt;Predicate&lt;/em&gt; or &lt;em&gt;Predicate2&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#countBy-org.eclipse.collections.api.block.function.Function-R-&quot;&gt;countBy&lt;/a&gt; — counts elements of a collection grouping them by some &lt;em&gt;Function&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/factory/Bags.html&quot;&gt;Bags&lt;/a&gt;.mutable.empty — creates an empty &lt;em&gt;MutableBag&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/bag/Bag.html#occurrencesOf-java.lang.Object-&quot;&gt;occurrencesOf&lt;/a&gt; — counts the number of occurrences of an item in a &lt;em&gt;Bag&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/api/RichIterable.html#toList--&quot;&gt;toList&lt;/a&gt; — converts a collection to a MutableList.&lt;/li&gt;&lt;li&gt;IntInterval.&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/list/primitive/IntInterval.html#oneTo-int-&quot;&gt;oneTo&lt;/a&gt; — creates an IntInterval which is an &lt;em&gt;ImmutableIntList&lt;/em&gt; from one to the specified number.&lt;/li&gt;&lt;li&gt;IntPredicates.&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/block/factory/primitive/IntPredicates.html#isEven--&quot;&gt;isEven&lt;/a&gt; / &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/block/factory/primitive/IntPredicates.html#isOdd--&quot;&gt;isOdd&lt;/a&gt; — creates an IntPredicate which tests if an int is even or odd.&lt;/li&gt;&lt;li&gt;Strings.&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.1.0/org/eclipse/collections/impl/factory/Strings.html#asChars-java.lang.String-&quot;&gt;asChars&lt;/a&gt; — creates a &lt;em&gt;CharAdapter&lt;/em&gt; wrapping the specified String.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=688dfaaf513c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 07 May 2018 04:08:40 +0000</pubDate>
</item>

</channel>
</rss>
