package abm;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.Iterator;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import abm.agents.Agent;
import abm.agents.Bank;
import abm.agents.CapitalGoodsFirm;
import abm.agents.ConsumptionGoodsFirm;
import abm.agents.Firm;
import abm.agents.NonFinancialAgent;
import abm.components.JobOffering;
import abm.markets.CreditMarket;
import repast.simphony.context.Context;
import repast.simphony.context.DefaultContext;
import repast.simphony.random.RandomHelper;
import repast.simphony.util.collections.IndexedIterable;

@SuppressWarnings({ "rawtypes", "unchecked" })
class LaborMarketSetupTest {

	protected Context<Agent> context ; 
	protected IndexedIterable<Agent> firms ;
	protected IndexedIterable<Agent> banks ;
	protected IndexedIterable<Agent> nonFins ;

	@BeforeEach
	void init() {
		
		context = new DefaultContext();
		Controller builder = new Controller();
		context = builder.build(context);
		
		firms = context.getObjects(ConsumptionGoodsFirm.class);
		nonFins = context.getObjects(NonFinancialAgent.class) ;
		banks = context.getObjects(Bank.class);
		
	}
	
	void initFirms(boolean random, boolean fire) {
		
		Iterator<Agent> firmsItr = firms.iterator() ;
		
		while(firmsItr.hasNext()) {
			Firm firm = (Firm) firmsItr.next() ;
			
			double prob = RandomHelper.createUniform(0, 1).nextDouble() ;
			
			if(firm instanceof ConsumptionGoodsFirm) {
				ConsumptionGoodsFirm conFirm = (ConsumptionGoodsFirm) firm ;
				long newDemand ;
				
				if(!random) {

					if(fire) {
						newDemand = (long) RandomHelper.nextDoubleFromTo(0, conFirm.getUsedCapacity()-10);
						conFirm.setInventory((long) (conFirm.getBeta()*newDemand));
					}
					else {
						if(prob > 0.5) {	
							newDemand = (long) RandomHelper.nextDoubleFromTo(conFirm.getUsedCapacity()+10, conFirm.getInstalledCapacity());
							conFirm.setInventory((long) (conFirm.getBeta()*newDemand));
						} 
						else {
							newDemand = (long) (conFirm.getInstalledCapacity() + 10 + RandomHelper.nextDouble());
							conFirm.setInventory((long) (conFirm.getBeta()*newDemand));
						}
					}
				}
				else {
					newDemand = (long) Math.abs(RandomHelper.nextDouble());
				}

				conFirm.setLastDemand(newDemand);
			}
			else if(firm instanceof CapitalGoodsFirm) {
				CapitalGoodsFirm capFirm = (CapitalGoodsFirm) firm ;
				
				if(fire) {
					firm.setIncome(RandomHelper.nextDoubleFromTo(0, capFirm.getIncome() - 10));
				}
				else {
					firm.setIncome(RandomHelper.nextDouble() + capFirm.getIncome() + 10);
				}
			}
			
			firm.planProduction(); 
			firm.calculateNeededCredit();
		}
	}
	
	void initBanks() {
		
		Iterator<Agent> banksItr = banks.iterator() ;
		
		while(banksItr.hasNext()) {
			Bank bank = (Bank) banksItr.next() ;
			bank.calculateTotalCredit(); 
			bank.calculateAvailableCredit(); 
			CreditMarket.getInstance().match(banks, nonFins);
		}
	}
	
	@Nested
	@DisplayName("Post job offerings")
	class PostOfferings {
		
		void testBudget() {
			
			Iterator<Agent> firmsItr = firms.iterator() ;
			
			while(firmsItr.hasNext()) {
				
				Firm firm = (Firm) firmsItr.next() ;
				double granted = CreditMarket.getInstance().getGrantedCredit(firm);
				double resources = firm.getFromAssets() + granted ;
				double additional = firm.getAdditionalPayroll() ;
				
				assertTrue(resources >= additional);
				
				ArrayList<JobOffering> offerings = firm.getJobOfferings() ;
				
				double wages = 0 ;
				if(offerings != null) {
					for(JobOffering offering : offerings) {
						wages += offering.getWage() ;
					}
				}
				
				System.out.println(wages - additional);
				assertTrue(Math.abs(wages - additional) < 1e-5);
			}
		}
		
		@Test
		@DisplayName("Demand rises")
		void rise() {
			
			initFirms(false, false);
			initBanks();
			testBudget();
		}
		
		@Test
		@DisplayName("Demand drops")
		void drop() {
			
			initFirms(true, false);
			initBanks();
			testBudget();
		}
		
		@Test
		@DisplayName("Random demand")
		void random() {
			
			initFirms(true, true);
			initBanks();
			testBudget();
		}
		
	}
}
