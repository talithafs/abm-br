fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = predict(fsi , test)
?predict
predicted = frbs::predict(fsi , test)
predicted = stats::predict(fsi , test)
acc = acc + accuracy(ts(predicted),ts(actual))[2]
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
acc
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
len = length(l.series)
results = vector(mode = "list", sum)
selic = l.series[[len]]
r.selic = c(min(selic),max(selic))
id = 1
for(i in 2:n){
combs = combn(names(l.series)[-len],i)
for(j in 1:ncol(combs)){
range = data.frame(matrix(ncol = i + 1, nrow = 2))
training = data.frame(matrix(ncol = (i + 1), nrow = nrow(l.series)))
names(training) = c(combs[,j],"selic.target")
names(range) = names(training)
for(k in 1:i){
name = combs[k,j]
series = l.series[,name]
range[,k] = c(min(series),max(series))
training[,k] = series
}
range[,i+1] = r.selic
training[,i+1] = selic
results[[id]]$vars = paste0(combs[,j], collapse = ", ")
results[[id]]$id = id
nrules.vec = seq(3,13,2)
rmse = 1.797693e+308
for(nrules in nrules.vec){
tryCatch({
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
if(acc < rmse){
rmse = acc
results[[id]]$rmse = rmse
results[[id]]$nlabels = nrules
results[[id]]$training = shuffled
results[[id]]$actual = actual
results[[id]]$predicted = predicted
results[[id]]$fsi = fsi
}
},
error = function(e) {
})
}
id = id + 1
}
}
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
sum
View(results)
length(results)
results[[1]]
results[[60000]]
results[[40000]]
require(BETS)
require(dplyr)
require(lubridate)
require(zoo)
to.monthly <- function(df, freq = "daily", format = NULL){
if(freq == "daily"){
names(df) <- c("date","value")
if(!is.null(format)){
df$date <- as.Date(df$date, format = format)
}
tb <- (df %>% group_by(month=floor_date(date, "month")) %>%
summarize(value=mean(value)))
dat <- tb[2,1]$month
first <- c(year(dat),month(dat))
return(ts(tb[c(-1,-nrow(tb)),2],start=first,frequency=12))
}
else if(freq == "quarterly") {
dat1 <- df[1,1]
first <- c(year(dat1),quarter(dat1)*3 - 2)
dat2 <- df[nrow(df),1]
last <- c(year(dat2),quarter(dat2)*3)
ret <- ts(0, start=first, end=last, frequency=12)
i = 1
k = 1
qt = quarter(dat1)
while(i != length(ret)+1){
for(j in qt:4){
ret[i] <- df$value[k]
i <- i + 1
qt <- qt + 1
}
qt <- 1
k <- k + 1
}
return(ret)
}
else { # aqui so entra obj ts - deveria ser data.frame data,valor
year1 <- start(df)[1]
first <- c(year1,1)
year2 <- end(df)[1]
last <- c(year2,12)
ret <- ts(0, start=first, end=last, frequency=12)
i = 1
k = 1
while(i != length(ret)+1){
for(j in 1:12){
ret[i] <- df[k]
i <- i + 1
}
k <- k + 1
}
return(ret)
}
}
cut.ends <- function(l.series){
max.len <- -1
for(i in 1:length(l.series)){
len <- length(l.series[[i]])
if(len > max.len){
max.len <- len
}
}
df <- data.frame(matrix(nrow=max.len, ncol=length(l.series)))
for(i in 1:length(l.series)){
series <- rev(l.series[[i]])
df[,i] <- c(series, rep(NA, max.len - length(series)))
}
names(df) <- names(l.series)
return(na.omit(df))
}
ins.lags <- function(l.series, lags = c(1:3,12)){
dims <- dim(l.series)
ret <- data.frame(matrix(nrow = dims[1], ncol = ((dims[2]-1)*length(lags))+1))
nms <- names(l.series)[-dims[2]]
i = 1
lags <- lags[-1] - 1
for(name in nms){
series <- l.series[[name]]
ret[,i] <- series
names(ret)[i] <- name
for(l in lags){
i = i + 1
rem <- 1:l
lagged <- c(series[-rem],rep(NA,length(rem)))
ret[,i] <- lagged
names(ret)[i] <- paste0(name,"_",l+1)
}
i = i + 1
}
ret[i] <- l.series[[dims[2]]]
names(ret)[i] <- names(l.series)[dims[2]]
return(na.omit(ret))
}
# IPCA accumulated 12 months
ipca.accum <- BETSget(13522) # montlhy
# Swap DI 360 days
di.swap <- BETSget(7827) # monthly
# Inflation expectations (next 12 months)
ipca.expec <- read.csv("expectativas.csv",stringsAsFactors = F) # daily
ipca.expec <- to.monthly(ipca.expec, format = "%d/%m/%Y")
# Real interest rates, ex-ante
di.swap <- window(di.swap, start=start(ipca.expec))
ri.exante <- di.swap - ipca.expec
# SELIC target
selic.target <- BETSget(432) # daily
selic.target <- to.monthly(selic.target)
# Annual SELIC
selic.annual <- BETSget(1178) # daily
selic.annual <- round(to.monthly(selic.annual),2)
# GDP gap
gdp.gap <- read.csv("hiato.csv", stringsAsFactors = F) # quarterly
gdp.gap$date <- as.yearqtr(gsub("T","Q",gdp.gap$date))
gdp.gap <- to.monthly(gdp.gap,freq="quarterly")
# IPCA target
ipca.target <- BETSget(13521)
ipca.target <- window(to.monthly(ipca.target, freq="yearly"), end=end(selic.target))
# List of series
l.series <- list(gdp.gap, ri.exante, ipca.accum, ipca.target, selic.target)
names(l.series) <- c("gdp.gap","ri.exante","ipca.accum","ipca.target","selic.target")
l.series <- ins.lags(cut.ends(l.series))
l.series <- data.frame(lapply(l.series, BETS::normalize))
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
len = length(l.series)
results = vector(mode = "list", sum)
selic = l.series[[len]]
r.selic = c(min(selic),max(selic))
id = 1
for(i in 2:n){
combs = combn(names(l.series)[-len],i)
for(j in 1:ncol(combs)){
print(paste("-- Vars:", paste0(combn[,j],collapse = ", ")))
range = data.frame(matrix(ncol = i + 1, nrow = 2))
training = data.frame(matrix(ncol = (i + 1), nrow = nrow(l.series)))
names(training) = c(combs[,j],"selic.target")
names(range) = names(training)
for(k in 1:i){
name = combs[k,j]
series = l.series[,name]
range[,k] = c(min(series),max(series))
training[,k] = series
}
range[,i+1] = r.selic
training[,i+1] = selic
results[[id]]$vars = paste0(combs[,j], collapse = ", ")
results[[id]]$id = id
nrules.vec = seq(3,13,2)
rmse = 1.797693e+308
for(nrules in nrules.vec){
tryCatch({
print(paste("--- NRls:", nrules))
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
if(acc < rmse){
rmse = acc
results[[id]]$rmse = rmse
results[[id]]$nlabels = nrules
results[[id]]$training = shuffled
results[[id]]$actual = actual
results[[id]]$predicted = predicted
results[[id]]$fsi = fsi
}
},
error = function(e) {
})
}
id = id + 1
}
}
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
len = length(l.series)
results = vector(mode = "list", sum)
selic = l.series[[len]]
r.selic = c(min(selic),max(selic))
id = 1
for(i in 2:n){
combs = combn(names(l.series)[-len],i)
for(j in 1:ncol(combs)){
print(paste("-- Vars:", paste0(combs[,j],collapse = ", ")))
range = data.frame(matrix(ncol = i + 1, nrow = 2))
training = data.frame(matrix(ncol = (i + 1), nrow = nrow(l.series)))
names(training) = c(combs[,j],"selic.target")
names(range) = names(training)
for(k in 1:i){
name = combs[k,j]
series = l.series[,name]
range[,k] = c(min(series),max(series))
training[,k] = series
}
range[,i+1] = r.selic
training[,i+1] = selic
results[[id]]$vars = paste0(combs[,j], collapse = ", ")
results[[id]]$id = id
nrules.vec = seq(3,13,2)
rmse = 1.797693e+308
for(nrules in nrules.vec){
tryCatch({
print(paste("--- NRls:", nrules))
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
if(acc < rmse){
rmse = acc
results[[id]]$rmse = rmse
results[[id]]$nlabels = nrules
results[[id]]$training = shuffled
results[[id]]$actual = actual
results[[id]]$predicted = predicted
results[[id]]$fsi = fsi
}
},
error = function(e) {
})
}
id = id + 1
}
}
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
len = length(l.series)
results = vector(mode = "list", sum)
selic = l.series[[len]]
r.selic = c(min(selic),max(selic))
id = 1
for(i in 2:n){
combs = combn(names(l.series)[-len],i)
for(j in 1:ncol(combs)){
print(paste("-- Vars:", paste0(combs[,j],collapse = ", ")))
range = data.frame(matrix(ncol = i + 1, nrow = 2))
training = data.frame(matrix(ncol = (i + 1), nrow = nrow(l.series)))
names(training) = c(combs[,j],"selic.target")
names(range) = names(training)
for(k in 1:i){
name = combs[k,j]
series = l.series[,name]
range[,k] = c(min(series),max(series))
training[,k] = series
}
range[,i+1] = r.selic
training[,i+1] = selic
results[[id]]$vars = paste0(combs[,j], collapse = ", ")
results[[id]]$id = id
nrules.vec = seq(3,13,2)
rmse = 1.797693e+308
for(nrules in nrules.vec){
tryCatch({
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
if(acc < rmse){
rmse = acc
results[[id]]$rmse = rmse
results[[id]]$nlabels = nrules
results[[id]]$training = shuffled
results[[id]]$actual = actual
results[[id]]$predicted = predicted
results[[id]]$fsi = fsi
}
},
error = function(e) {
})
}
print(paste("--- Completed",round(10000*id/sum,2)))
id = id + 1
}
}
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
len = length(l.series)
results = vector(mode = "list", sum)
selic = l.series[[len]]
r.selic = c(min(selic),max(selic))
id = 1
for(i in 2:n){
combs = combn(names(l.series)[-len],i)
for(j in 1:ncol(combs)){
print(paste("-- Vars:", paste0(combs[,j],collapse = ", ")))
range = data.frame(matrix(ncol = i + 1, nrow = 2))
training = data.frame(matrix(ncol = (i + 1), nrow = nrow(l.series)))
names(training) = c(combs[,j],"selic.target")
names(range) = names(training)
for(k in 1:i){
name = combs[k,j]
series = l.series[,name]
range[,k] = c(min(series),max(series))
training[,k] = series
}
range[,i+1] = r.selic
training[,i+1] = selic
results[[id]]$vars = paste0(combs[,j], collapse = ", ")
results[[id]]$id = id
nrules.vec = seq(3,7,2)
rmse = 1.797693e+308
for(nrules in nrules.vec){
tryCatch({
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
if(acc < rmse){
rmse = acc
results[[id]]$rmse = rmse
results[[id]]$nlabels = nrules
results[[id]]$training = shuffled
results[[id]]$actual = actual
results[[id]]$predicted = predicted
results[[id]]$fsi = fsi
}
},
error = function(e) {
})
}
print(paste0("--- Completed ",round(10000*id/sum,2),"%"))
id = id + 1
}
}
sum = 0
n = ncol(l.series) - 1
for(i in 2:n){
sum = sum + choose(n,i)
}
len = length(l.series)
results = vector(mode = "list", sum)
selic = l.series[[len]]
r.selic = c(min(selic),max(selic))
id = 1
for(i in 2:n){
combs = combn(names(l.series)[-len],i)
for(j in 1:ncol(combs)){
print(paste("-- Vars:", paste0(combs[,j],collapse = ", ")))
range = data.frame(matrix(ncol = i + 1, nrow = 2))
training = data.frame(matrix(ncol = (i + 1), nrow = nrow(l.series)))
names(training) = c(combs[,j],"selic.target")
names(range) = names(training)
for(k in 1:i){
name = combs[k,j]
series = l.series[,name]
range[,k] = c(min(series),max(series))
training[,k] = series
}
range[,i+1] = r.selic
training[,i+1] = selic
results[[id]]$vars = paste0(combs[,j], collapse = ", ")
results[[id]]$id = id
nrules.vec = seq(3,7,2)
rmse = 1.797693e+308
for(nrules in nrules.vec){
tryCatch({
acc = 0
for(p in 1:30){
shuffled = training[sample(nrow(training)), ]
train <- shuffled[1:(rows-10), ]
test <- shuffled[(rows-9):rows, 1:i]
actual <- matrix(shuffled[(rows-9):rows, i+1], ncol = 1)
fsi <- frbs.learn(train, range.data = range, method.type = "WM", control = list(num.labels = nrules, type.mf = "GAUSSIAN", type.defuz = "COG"))
predicted = stats::predict(fsi , test)
acc = acc + forecast::accuracy(ts(predicted),ts(actual))[2]
}
acc = acc/30
if(acc < rmse){
rmse = acc
results[[id]]$rmse = rmse
results[[id]]$nlabels = nrules
results[[id]]$training = shuffled
results[[id]]$actual = actual
results[[id]]$predicted = predicted
results[[id]]$fsi = fsi
}
},
error = function(e) {
})
}
print(paste0("--- Completed ",round(100*id/sum,3),"%"))
id = id + 1
}
}
fl <- file("results.RData")
getwd()
?save
save(results,file=fl)
